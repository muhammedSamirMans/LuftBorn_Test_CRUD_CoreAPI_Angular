{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nconst _c0 = function (a0) {\n  return {\n    notification: a0\n  };\n};\nfunction NotifierNotificationComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 2);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.notification.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r0.notification));\n  }\n}\nfunction NotifierNotificationComponent_ng_template_1_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function NotifierNotificationComponent_ng_template_1_button_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.onClickDismiss());\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 6);\n    i0.ɵɵelement(2, \"path\", 7);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction NotifierNotificationComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, NotifierNotificationComponent_ng_template_1_button_2_Template, 3, 0, \"button\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.notification.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.config.behaviour.showDismissButton);\n  }\n}\nfunction NotifierContainerComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 2)(1, \"notifier-notification\", 3);\n    i0.ɵɵlistener(\"ready\", function NotifierContainerComponent_li_1_Template_notifier_notification_ready_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onNotificationReady($event));\n    })(\"dismiss\", function NotifierContainerComponent_li_1_Template_notifier_notification_dismiss_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onNotificationDismiss($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const notification_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"notification\", notification_r1);\n  }\n}\nclass NotifierNotification {\n  /**\n   * Constructor\n   *\n   * @param options Notifier options\n   */\n  constructor(options) {\n    /**\n     * The template to customize\n     * the appearance of the notification\n     */\n    this.template = null;\n    Object.assign(this, options);\n    // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n    // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n    // is not possible due to the action queue concept.\n    if (options.id === undefined) {\n      this.id = `ID_${new Date().getTime()}`;\n    }\n  }\n}\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\nclass NotifierQueueService {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this.actionStream = new Subject();\n    this.actionQueue = [];\n    this.isActionInProgress = false;\n  }\n  /**\n   * Push a new action to the queue, and try to run it\n   *\n   * @param action Action object\n   */\n  push(action) {\n    this.actionQueue.push(action);\n    this.tryToRunNextAction();\n  }\n  /**\n   * Continue with the next action (called when the current action is finished)\n   */\n  continue() {\n    this.isActionInProgress = false;\n    this.tryToRunNextAction();\n  }\n  /**\n   * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n   */\n  tryToRunNextAction() {\n    if (this.isActionInProgress || this.actionQueue.length === 0) {\n      return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n    }\n\n    this.isActionInProgress = true;\n    this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\n  }\n}\n\nNotifierQueueService.ɵfac = function NotifierQueueService_Factory(t) {\n  return new (t || NotifierQueueService)();\n};\nNotifierQueueService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NotifierQueueService,\n  factory: NotifierQueueService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NotifierQueueService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * Injection Token for notifier options\n */\nconst NotifierOptionsToken = new InjectionToken('[angular-notifier] Notifier Options');\n/**\n * Injection Token for notifier configuration\n */\nconst NotifierConfigToken = new InjectionToken('[anuglar-notifier] Notifier Config');\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nclass NotifierConfig {\n  /**\n   * Constructor\n   *\n   * @param [customOptions={}] Custom notifier options, optional\n   */\n  constructor(customOptions = {}) {\n    // Set default values\n    this.animations = {\n      enabled: true,\n      hide: {\n        easing: 'ease',\n        offset: 50,\n        preset: 'fade',\n        speed: 300\n      },\n      overlap: 150,\n      shift: {\n        easing: 'ease',\n        speed: 300\n      },\n      show: {\n        easing: 'ease',\n        preset: 'slide',\n        speed: 300\n      }\n    };\n    this.behaviour = {\n      autoHide: 7000,\n      onClick: false,\n      onMouseover: 'pauseAutoHide',\n      showDismissButton: true,\n      stacking: 4\n    };\n    this.position = {\n      horizontal: {\n        distance: 12,\n        position: 'left'\n      },\n      vertical: {\n        distance: 12,\n        gap: 10,\n        position: 'bottom'\n      }\n    };\n    this.theme = 'material';\n    // The following merges the custom options into the notifier config, respecting the already set default values\n    // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n    // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n    if (customOptions.theme !== undefined) {\n      this.theme = customOptions.theme;\n    }\n    if (customOptions.animations !== undefined) {\n      if (customOptions.animations.enabled !== undefined) {\n        this.animations.enabled = customOptions.animations.enabled;\n      }\n      if (customOptions.animations.overlap !== undefined) {\n        this.animations.overlap = customOptions.animations.overlap;\n      }\n      if (customOptions.animations.hide !== undefined) {\n        Object.assign(this.animations.hide, customOptions.animations.hide);\n      }\n      if (customOptions.animations.shift !== undefined) {\n        Object.assign(this.animations.shift, customOptions.animations.shift);\n      }\n      if (customOptions.animations.show !== undefined) {\n        Object.assign(this.animations.show, customOptions.animations.show);\n      }\n    }\n    if (customOptions.behaviour !== undefined) {\n      Object.assign(this.behaviour, customOptions.behaviour);\n    }\n    if (customOptions.position !== undefined) {\n      if (customOptions.position.horizontal !== undefined) {\n        Object.assign(this.position.horizontal, customOptions.position.horizontal);\n      }\n      if (customOptions.position.vertical !== undefined) {\n        Object.assign(this.position.vertical, customOptions.position.vertical);\n      }\n    }\n  }\n}\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\nclass NotifierService {\n  /**\n   * Constructor\n   *\n   * @param notifierQueueService Notifier queue service\n   * @param config               Notifier configuration, optionally injected as a dependency\n   */\n  constructor(notifierQueueService, config) {\n    this.queueService = notifierQueueService;\n    this.config = config;\n  }\n  /**\n   * Get the notifier configuration\n   *\n   * @returns Notifier configuration\n   */\n  getConfig() {\n    return this.config;\n  }\n  /**\n   * Get the observable for handling actions\n   *\n   * @returns Observable of NotifierAction\n   */\n  get actionStream() {\n    return this.queueService.actionStream.asObservable();\n  }\n  /**\n   * API: Show a new notification\n   *\n   * @param notificationOptions Notification options\n   */\n  show(notificationOptions) {\n    this.queueService.push({\n      payload: notificationOptions,\n      type: 'SHOW'\n    });\n  }\n  /**\n   * API: Hide a specific notification, given its ID\n   *\n   * @param notificationId ID of the notification to hide\n   */\n  hide(notificationId) {\n    this.queueService.push({\n      payload: notificationId,\n      type: 'HIDE'\n    });\n  }\n  /**\n   * API: Hide the newest notification\n   */\n  hideNewest() {\n    this.queueService.push({\n      type: 'HIDE_NEWEST'\n    });\n  }\n  /**\n   * API: Hide the oldest notification\n   */\n  hideOldest() {\n    this.queueService.push({\n      type: 'HIDE_OLDEST'\n    });\n  }\n  /**\n   * API: Hide all notifications at once\n   */\n  hideAll() {\n    this.queueService.push({\n      type: 'HIDE_ALL'\n    });\n  }\n  /**\n   * API: Shortcut for showing a new notification\n   *\n   * @param type             Type of the notification\n   * @param message          Message of the notification\n   * @param [notificationId] Unique ID for the notification (optional)\n   */\n  notify(type, message, notificationId) {\n    const notificationOptions = {\n      message,\n      type\n    };\n    if (notificationId !== undefined) {\n      notificationOptions.id = notificationId;\n    }\n    this.show(notificationOptions);\n  }\n}\nNotifierService.ɵfac = function NotifierService_Factory(t) {\n  return new (t || NotifierService)(i0.ɵɵinject(NotifierQueueService), i0.ɵɵinject(NotifierConfigToken));\n};\nNotifierService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NotifierService,\n  factory: NotifierService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NotifierService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NotifierQueueService\n    }, {\n      type: NotifierConfig,\n      decorators: [{\n        type: Inject,\n        args: [NotifierConfigToken]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\nclass NotifierTimerService {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this.now = 0;\n    this.remaining = 0;\n  }\n  /**\n   * Start (or resume) the timer\n   *\n   * @param   duration Timer duration, in ms\n   * @returns          Promise, resolved once the timer finishes\n   */\n  start(duration) {\n    return new Promise(resolve => {\n      // For the first run ...\n      this.remaining = duration;\n      // Setup, then start the timer\n      this.finishPromiseResolver = resolve;\n      this.continue();\n    });\n  }\n  /**\n   * Pause the timer\n   */\n  pause() {\n    clearTimeout(this.timerId);\n    this.remaining -= new Date().getTime() - this.now;\n  }\n  /**\n   * Continue the timer\n   */\n  continue() {\n    this.now = new Date().getTime();\n    this.timerId = window.setTimeout(() => {\n      this.finish();\n    }, this.remaining);\n  }\n  /**\n   * Stop the timer\n   */\n  stop() {\n    clearTimeout(this.timerId);\n    this.remaining = 0;\n  }\n  /**\n   * Finish up the timeout by resolving the timer promise\n   */\n  finish() {\n    this.finishPromiseResolver();\n  }\n}\nNotifierTimerService.ɵfac = function NotifierTimerService_Factory(t) {\n  return new (t || NotifierTimerService)();\n};\nNotifierTimerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NotifierTimerService,\n  factory: NotifierTimerService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NotifierTimerService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * Fade animation preset\n */\nconst fade = {\n  hide: () => {\n    return {\n      from: {\n        opacity: '1'\n      },\n      to: {\n        opacity: '0'\n      }\n    };\n  },\n  show: () => {\n    return {\n      from: {\n        opacity: '0'\n      },\n      to: {\n        opacity: '1'\n      }\n    };\n  }\n};\n\n/**\n * Slide animation preset\n */\nconst slide = {\n  hide: notification => {\n    // Prepare variables\n    const config = notification.component.getConfig();\n    const shift = notification.component.getShift();\n    let from;\n    let to;\n    // Configure variables, depending on configuration and component\n    if (config.position.horizontal.position === 'left') {\n      from = {\n        transform: `translate3d( 0, ${shift}px, 0 )`\n      };\n      to = {\n        transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`\n      };\n    } else if (config.position.horizontal.position === 'right') {\n      from = {\n        transform: `translate3d( 0, ${shift}px, 0 )`\n      };\n      to = {\n        transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`\n      };\n    } else {\n      let horizontalPosition;\n      if (config.position.vertical.position === 'top') {\n        horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n      } else {\n        horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n      }\n      from = {\n        transform: `translate3d( -50%, ${shift}px, 0 )`\n      };\n      to = {\n        transform: `translate3d( -50%, ${horizontalPosition}, 0 )`\n      };\n    }\n    // Done\n    return {\n      from,\n      to\n    };\n  },\n  show: notification => {\n    // Prepare variables\n    const config = notification.component.getConfig();\n    let from;\n    let to;\n    // Configure variables, depending on configuration and component\n    if (config.position.horizontal.position === 'left') {\n      from = {\n        transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`\n      };\n      to = {\n        transform: 'translate3d( 0, 0, 0 )'\n      };\n    } else if (config.position.horizontal.position === 'right') {\n      from = {\n        transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`\n      };\n      to = {\n        transform: 'translate3d( 0, 0, 0 )'\n      };\n    } else {\n      let horizontalPosition;\n      if (config.position.vertical.position === 'top') {\n        horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n      } else {\n        horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n      }\n      from = {\n        transform: `translate3d( -50%, ${horizontalPosition}, 0 )`\n      };\n      to = {\n        transform: 'translate3d( -50%, 0, 0 )'\n      };\n    }\n    // Done\n    return {\n      from,\n      to\n    };\n  }\n};\n\n/**\n * Notifier animation service\n */\nclass NotifierAnimationService {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this.animationPresets = {\n      fade,\n      slide\n    };\n  }\n  /**\n   * Get animation data\n   *\n   * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n   * direction (either in or out) as well as the notifications (and its attributes) itself.\n   *\n   * @param   direction    Animation direction, either in or out\n   * @param   notification Notification the animation data should be generated for\n   * @returns Animation information\n   */\n  getAnimationData(direction, notification) {\n    // Get all necessary animation data\n    let keyframes;\n    let duration;\n    let easing;\n    if (direction === 'show') {\n      keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n      duration = notification.component.getConfig().animations.show.speed;\n      easing = notification.component.getConfig().animations.show.easing;\n    } else {\n      keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n      duration = notification.component.getConfig().animations.hide.speed;\n      easing = notification.component.getConfig().animations.hide.easing;\n    }\n    // Build and return animation data\n    return {\n      keyframes: [keyframes.from, keyframes.to],\n      options: {\n        duration,\n        easing,\n        fill: 'forwards' // Keep the newly painted state after the animation finished\n      }\n    };\n  }\n}\n\nNotifierAnimationService.ɵfac = function NotifierAnimationService_Factory(t) {\n  return new (t || NotifierAnimationService)();\n};\nNotifierAnimationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NotifierAnimationService,\n  factory: NotifierAnimationService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NotifierAnimationService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\nclass NotifierNotificationComponent {\n  /**\n   * Constructor\n   *\n   * @param elementRef               Reference to the component's element\n   * @param renderer                 Angular renderer\n   * @param notifierService          Notifier service\n   * @param notifierTimerService     Notifier timer service\n   * @param notifierAnimationService Notifier animation service\n   */\n  constructor(elementRef, renderer, notifierService, notifierTimerService, notifierAnimationService) {\n    this.config = notifierService.getConfig();\n    this.ready = new EventEmitter();\n    this.dismiss = new EventEmitter();\n    this.timerService = notifierTimerService;\n    this.animationService = notifierAnimationService;\n    this.renderer = renderer;\n    this.element = elementRef.nativeElement;\n    this.elementShift = 0;\n  }\n  /**\n   * Component after view init lifecycle hook, setts up the component and then emits the ready event\n   */\n  ngAfterViewInit() {\n    this.setup();\n    this.elementHeight = this.element.offsetHeight;\n    this.elementWidth = this.element.offsetWidth;\n    this.ready.emit(this);\n  }\n  /**\n   * Get the notifier config\n   *\n   * @returns Notifier configuration\n   */\n  getConfig() {\n    return this.config;\n  }\n  /**\n   * Get notification element height (in px)\n   *\n   * @returns Notification element height (in px)\n   */\n  getHeight() {\n    return this.elementHeight;\n  }\n  /**\n   * Get notification element width (in px)\n   *\n   * @returns Notification element height (in px)\n   */\n  getWidth() {\n    return this.elementWidth;\n  }\n  /**\n   * Get notification shift offset (in px)\n   *\n   * @returns Notification element shift offset (in px)\n   */\n  getShift() {\n    return this.elementShift;\n  }\n  /**\n   * Show (animate in) this notification\n   *\n   * @returns Promise, resolved when done\n   */\n  show() {\n    return new Promise(resolve => {\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.show.speed > 0) {\n        // Get animation data\n        const animationData = this.animationService.getAnimationData('show', this.notification);\n        // Set initial styles (styles before animation), prevents quick flicker when animation starts\n        const animatedProperties = Object.keys(animationData.keyframes[0]);\n        for (let i = animatedProperties.length - 1; i >= 0; i--) {\n          this.renderer.setStyle(this.element, animatedProperties[i], animationData.keyframes[0][animatedProperties[i]]);\n        }\n        // Animate notification in\n        this.renderer.setStyle(this.element, 'visibility', 'visible');\n        const animation = this.element.animate(animationData.keyframes, animationData.options);\n        animation.onfinish = () => {\n          this.startAutoHideTimer();\n          resolve(); // Done\n        };\n      } else {\n        // Show notification\n        this.renderer.setStyle(this.element, 'visibility', 'visible');\n        this.startAutoHideTimer();\n        resolve(); // Done\n      }\n    });\n  }\n  /**\n   * Hide (animate out) this notification\n   *\n   * @returns Promise, resolved when done\n   */\n  hide() {\n    return new Promise(resolve => {\n      this.stopAutoHideTimer();\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n        const animationData = this.animationService.getAnimationData('hide', this.notification);\n        const animation = this.element.animate(animationData.keyframes, animationData.options);\n        animation.onfinish = () => {\n          resolve(); // Done\n        };\n      } else {\n        resolve(); // Done\n      }\n    });\n  }\n  /**\n   * Shift (move) this notification\n   *\n   * @param   distance         Distance to shift (in px)\n   * @param   shiftToMakePlace Flag, defining in which direction to shift\n   * @returns Promise, resolved when done\n   */\n  shift(distance, shiftToMakePlace) {\n    return new Promise(resolve => {\n      // Calculate new position (position after the shift)\n      let newElementShift;\n      if (this.config.position.vertical.position === 'top' && shiftToMakePlace || this.config.position.vertical.position === 'bottom' && !shiftToMakePlace) {\n        newElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n      } else {\n        newElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n      }\n      const horizontalPosition = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {\n        const animationData = {\n          // TODO: Extract into animation service\n          keyframes: [{\n            transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`\n          }, {\n            transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`\n          }],\n          options: {\n            duration: this.config.animations.shift.speed,\n            easing: this.config.animations.shift.easing,\n            fill: 'forwards'\n          }\n        };\n        this.elementShift = newElementShift;\n        const animation = this.element.animate(animationData.keyframes, animationData.options);\n        animation.onfinish = () => {\n          resolve(); // Done\n        };\n      } else {\n        this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);\n        this.elementShift = newElementShift;\n        resolve(); // Done\n      }\n    });\n  }\n  /**\n   * Handle click on dismiss button\n   */\n  onClickDismiss() {\n    this.dismiss.emit(this.notification.id);\n  }\n  /**\n   * Handle mouseover over notification area\n   */\n  onNotificationMouseover() {\n    if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n      this.pauseAutoHideTimer();\n    } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n      this.stopAutoHideTimer();\n    }\n  }\n  /**\n   * Handle mouseout from notification area\n   */\n  onNotificationMouseout() {\n    if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n      this.continueAutoHideTimer();\n    } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n      this.startAutoHideTimer();\n    }\n  }\n  /**\n   * Handle click on notification area\n   */\n  onNotificationClick() {\n    if (this.config.behaviour.onClick === 'hide') {\n      this.onClickDismiss();\n    }\n  }\n  /**\n   * Start the auto hide timer (if enabled)\n   */\n  startAutoHideTimer() {\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n      this.timerService.start(this.config.behaviour.autoHide).then(() => {\n        this.onClickDismiss();\n      });\n    }\n  }\n  /**\n   * Pause the auto hide timer (if enabled)\n   */\n  pauseAutoHideTimer() {\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n      this.timerService.pause();\n    }\n  }\n  /**\n   * Continue the auto hide timer (if enabled)\n   */\n  continueAutoHideTimer() {\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n      this.timerService.continue();\n    }\n  }\n  /**\n   * Stop the auto hide timer (if enabled)\n   */\n  stopAutoHideTimer() {\n    if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n      this.timerService.stop();\n    }\n  }\n  /**\n   * Initial notification setup\n   */\n  setup() {\n    // Set start position (initially the exact same for every new notification)\n    if (this.config.position.horizontal.position === 'left') {\n      this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);\n    } else if (this.config.position.horizontal.position === 'right') {\n      this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);\n    } else {\n      this.renderer.setStyle(this.element, 'left', '50%');\n      // Let's get the GPU handle some work as well (#perfmatters)\n      this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\n    }\n    if (this.config.position.vertical.position === 'top') {\n      this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);\n    } else {\n      this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);\n    }\n    // Add classes (responsible for visual design)\n    this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);\n    this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);\n  }\n}\nNotifierNotificationComponent.ɵfac = function NotifierNotificationComponent_Factory(t) {\n  return new (t || NotifierNotificationComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(NotifierService), i0.ɵɵdirectiveInject(NotifierTimerService), i0.ɵɵdirectiveInject(NotifierAnimationService));\n};\nNotifierNotificationComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NotifierNotificationComponent,\n  selectors: [[\"notifier-notification\"]],\n  hostAttrs: [1, \"notifier__notification\"],\n  hostBindings: function NotifierNotificationComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function NotifierNotificationComponent_click_HostBindingHandler() {\n        return ctx.onNotificationClick();\n      })(\"mouseout\", function NotifierNotificationComponent_mouseout_HostBindingHandler() {\n        return ctx.onNotificationMouseout();\n      })(\"mouseover\", function NotifierNotificationComponent_mouseover_HostBindingHandler() {\n        return ctx.onNotificationMouseover();\n      });\n    }\n  },\n  inputs: {\n    notification: \"notification\"\n  },\n  outputs: {\n    ready: \"ready\",\n    dismiss: \"dismiss\"\n  },\n  features: [i0.ɵɵProvidersFeature([\n  // We provide the timer to the component's local injector, so that every notification components gets its own\n  // instance of the timer service, thus running their timers independently from each other\n  NotifierTimerService])],\n  decls: 3,\n  vars: 2,\n  consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\", \"ngIfElse\"], [\"predefinedNotification\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"notifier__notification-message\"], [\"class\", \"notifier__notification-button\", \"type\", \"button\", \"title\", \"dismiss\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"title\", \"dismiss\", 1, \"notifier__notification-button\", 3, \"click\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"20\", \"height\", \"20\", 1, \"notifier__notification-button-icon\"], [\"d\", \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"]],\n  template: function NotifierNotificationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NotifierNotificationComponent_ng_container_0_Template, 1, 4, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, NotifierNotificationComponent_ng_template_1_Template, 3, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.notification.template)(\"ngIfElse\", _r1);\n    }\n  },\n  dependencies: [i4.NgIf, i4.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NotifierNotificationComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '(click)': 'onNotificationClick()',\n        '(mouseout)': 'onNotificationMouseout()',\n        '(mouseover)': 'onNotificationMouseover()',\n        class: 'notifier__notification'\n      },\n      providers: [\n      // We provide the timer to the component's local injector, so that every notification components gets its own\n      // instance of the timer service, thus running their timers independently from each other\n      NotifierTimerService],\n      selector: 'notifier-notification',\n      template: \"<ng-container\\n  *ngIf=\\\"notification.template; else predefinedNotification\\\"\\n  [ngTemplateOutlet]=\\\"notification.template\\\"\\n  [ngTemplateOutletContext]=\\\"{ notification: notification }\\\"\\n>\\n</ng-container>\\n\\n<ng-template #predefinedNotification>\\n  <p class=\\\"notifier__notification-message\\\">{{ notification.message }}</p>\\n  <button\\n    class=\\\"notifier__notification-button\\\"\\n    type=\\\"button\\\"\\n    title=\\\"dismiss\\\"\\n    *ngIf=\\\"config.behaviour.showDismissButton\\\"\\n    (click)=\\\"onClickDismiss()\\\"\\n  >\\n    <svg class=\\\"notifier__notification-button-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"20\\\" height=\\\"20\\\">\\n      <path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\" />\\n    </svg>\\n  </button>\\n</ng-template>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: NotifierService\n    }, {\n      type: NotifierTimerService\n    }, {\n      type: NotifierAnimationService\n    }];\n  }, {\n    notification: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    dismiss: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\nclass NotifierContainerComponent {\n  /**\n   * Constructor\n   *\n   * @param changeDetector       Change detector, used for manually triggering change detection runs\n   * @param notifierQueueService Notifier queue service\n   * @param notifierService      Notifier service\n   */\n  constructor(changeDetector, notifierQueueService, notifierService) {\n    this.changeDetector = changeDetector;\n    this.queueService = notifierQueueService;\n    this.config = notifierService.getConfig();\n    this.notifications = [];\n    // Connects this component up to the action queue, then handle incoming actions\n    this.queueServiceSubscription = this.queueService.actionStream.subscribe(action => {\n      this.handleAction(action).then(() => {\n        this.queueService.continue();\n      });\n    });\n  }\n  /**\n   * Component destroyment lifecycle hook, cleans up the observable subsciption\n   */\n  ngOnDestroy() {\n    if (this.queueServiceSubscription) {\n      this.queueServiceSubscription.unsubscribe();\n    }\n  }\n  /**\n   * Notification identifier, used as the ngFor trackby function\n   *\n   * @param   index        Index\n   * @param   notification Notifier notification\n   * @returns Notification ID as the unique identnfier\n   */\n  identifyNotification(index, notification) {\n    return notification.id;\n  }\n  /**\n   * Event handler, handles clicks on notification dismiss buttons\n   *\n   * @param notificationId ID of the notification to dismiss\n   */\n  onNotificationDismiss(notificationId) {\n    this.queueService.push({\n      payload: notificationId,\n      type: 'HIDE'\n    });\n  }\n  /**\n   * Event handler, handles notification ready events\n   *\n   * @param notificationComponent Notification component reference\n   */\n  onNotificationReady(notificationComponent) {\n    const currentNotification = this.notifications[this.notifications.length - 1]; // Get the latest notification\n    currentNotification.component = notificationComponent; // Save the new omponent reference\n    this.continueHandleShowAction(currentNotification); // Continue with handling the show action\n  }\n  /**\n   * Handle incoming actions by mapping action types to methods, and then running them\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  handleAction(action) {\n    switch (action.type // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n    ) {\n      case 'SHOW':\n        return this.handleShowAction(action);\n      case 'HIDE':\n        return this.handleHideAction(action);\n      case 'HIDE_OLDEST':\n        return this.handleHideOldestAction(action);\n      case 'HIDE_NEWEST':\n        return this.handleHideNewestAction(action);\n      case 'HIDE_ALL':\n        return this.handleHideAllAction();\n      default:\n        return new Promise(resolve => {\n          resolve(); // Ignore unknown action types\n        });\n    }\n  }\n  /**\n   * Show a new notification\n   *\n   * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  handleShowAction(action) {\n    return new Promise(resolve => {\n      this.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n      this.addNotificationToList(new NotifierNotification(action.payload));\n    });\n  }\n  /**\n   * Continue to show a new notification (after the notification components is initialized / created / rendered).\n   *\n   * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n   * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n   * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n   * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n   *\n   * @param notification New notification to show\n   */\n  continueHandleShowAction(notification) {\n    // First (which means only one) notification in the list?\n    const numberOfNotifications = this.notifications.length;\n    if (numberOfNotifications === 1) {\n      notification.component.show().then(this.tempPromiseResolver); // Done\n    } else {\n      const implicitStackingLimit = 2;\n      // Stacking enabled? (stacking value below 2 means stacking is disabled)\n      if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\n        this.notifications[0].component.hide().then(() => {\n          this.removeNotificationFromList(this.notifications[0]);\n          notification.component.show().then(this.tempPromiseResolver); // Done\n        });\n      } else {\n        const stepPromises = [];\n        // Are there now too many notifications?\n        if (numberOfNotifications > this.config.behaviour.stacking) {\n          const oldNotifications = this.notifications.slice(1, numberOfNotifications - 1);\n          // Are animations enabled?\n          if (this.config.animations.enabled) {\n            // Is animation overlap enabled?\n            if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n              stepPromises.push(this.notifications[0].component.hide());\n              setTimeout(() => {\n                stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n              }, this.config.animations.hide.speed - this.config.animations.overlap);\n              setTimeout(() => {\n                stepPromises.push(notification.component.show());\n              }, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\n            } else {\n              stepPromises.push(new Promise(resolve => {\n                this.notifications[0].component.hide().then(() => {\n                  this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                    notification.component.show().then(resolve);\n                  });\n                });\n              }));\n            }\n          } else {\n            stepPromises.push(this.notifications[0].component.hide());\n            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n            stepPromises.push(notification.component.show());\n          }\n        } else {\n          const oldNotifications = this.notifications.slice(0, numberOfNotifications - 1);\n          // Are animations enabled?\n          if (this.config.animations.enabled) {\n            // Is animation overlap enabled?\n            if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n              setTimeout(() => {\n                stepPromises.push(notification.component.show());\n              }, this.config.animations.shift.speed - this.config.animations.overlap);\n            } else {\n              stepPromises.push(new Promise(resolve => {\n                this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                  notification.component.show().then(resolve);\n                });\n              }));\n            }\n          } else {\n            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n            stepPromises.push(notification.component.show());\n          }\n        }\n        Promise.all(stepPromises).then(() => {\n          if (numberOfNotifications > this.config.behaviour.stacking) {\n            this.removeNotificationFromList(this.notifications[0]);\n          }\n          this.tempPromiseResolver();\n        }); // Done\n      }\n    }\n  }\n  /**\n   * Hide an existing notification\n   *\n   * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n   * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n   * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n   *\n   * @param   action Action object, payload contains the notification ID\n   * @returns Promise, resolved when done\n   */\n  handleHideAction(action) {\n    return new Promise(resolve => {\n      const stepPromises = [];\n      // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n      const notification = this.findNotificationById(action.payload);\n      if (notification === undefined) {\n        resolve();\n        return;\n      }\n      // Get older notifications\n      const notificationIndex = this.findNotificationIndexById(action.payload);\n      if (notificationIndex === undefined) {\n        resolve();\n        return;\n      }\n      const oldNotifications = this.notifications.slice(0, notificationIndex);\n      // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n      if (oldNotifications.length > 0) {\n        // Are animations enabled?\n        if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n          // Is animation overlap enabled?\n          if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n            stepPromises.push(notification.component.hide());\n            setTimeout(() => {\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n            }, this.config.animations.hide.speed - this.config.animations.overlap);\n          } else {\n            notification.component.hide().then(() => {\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n            });\n          }\n        } else {\n          stepPromises.push(notification.component.hide());\n          stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n        }\n      } else {\n        stepPromises.push(notification.component.hide());\n      }\n      // Wait until both hiding and shifting is done, then remove the notification from the list\n      Promise.all(stepPromises).then(() => {\n        this.removeNotificationFromList(notification);\n        resolve(); // Done\n      });\n    });\n  }\n  /**\n   * Hide the oldest notification (bridge to handleHideAction)\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  handleHideOldestAction(action) {\n    // Are there any notifications? (prevent accidential errors)\n    if (this.notifications.length === 0) {\n      return new Promise(resolve => {\n        resolve();\n      }); // Done\n    } else {\n      action.payload = this.notifications[0].id;\n      return this.handleHideAction(action);\n    }\n  }\n  /**\n   * Hide the newest notification (bridge to handleHideAction)\n   *\n   * @param   action Action object\n   * @returns Promise, resolved when done\n   */\n  handleHideNewestAction(action) {\n    // Are there any notifications? (prevent accidential errors)\n    if (this.notifications.length === 0) {\n      return new Promise(resolve => {\n        resolve();\n      }); // Done\n    } else {\n      action.payload = this.notifications[this.notifications.length - 1].id;\n      return this.handleHideAction(action);\n    }\n  }\n  /**\n   * Hide all notifications at once\n   *\n   * @returns Promise, resolved when done\n   */\n  handleHideAllAction() {\n    return new Promise(resolve => {\n      // Are there any notifications? (prevent accidential errors)\n      const numberOfNotifications = this.notifications.length;\n      if (numberOfNotifications === 0) {\n        resolve(); // Done\n        return;\n      }\n      // Are animations enabled?\n      if (this.config.animations.enabled && this.config.animations.hide.speed > 0 && this.config.animations.hide.offset !== false && this.config.animations.hide.offset > 0) {\n        for (let i = numberOfNotifications - 1; i >= 0; i--) {\n          const animationOffset = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n          setTimeout(() => {\n            this.notifications[i].component.hide().then(() => {\n              // Are we done here, was this the last notification to be hidden?\n              if (this.config.position.vertical.position === 'top' && i === 0 || this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1) {\n                this.removeAllNotificationsFromList();\n                resolve(); // Done\n              }\n            });\n          }, this.config.animations.hide.offset * animationOffset);\n        }\n      } else {\n        const stepPromises = [];\n        for (let i = numberOfNotifications - 1; i >= 0; i--) {\n          stepPromises.push(this.notifications[i].component.hide());\n        }\n        Promise.all(stepPromises).then(() => {\n          this.removeAllNotificationsFromList();\n          resolve(); // Done\n        });\n      }\n    });\n  }\n  /**\n   * Shift multiple notifications at once\n   *\n   * @param   notifications List containing the notifications to be shifted\n   * @param   distance      Distance to shift (in px)\n   * @param   toMakePlace   Flag, defining in which direciton to shift\n   * @returns Promise, resolved when done\n   */\n  shiftNotifications(notifications, distance, toMakePlace) {\n    return new Promise(resolve => {\n      // Are there any notifications to shift?\n      if (notifications.length === 0) {\n        resolve();\n        return;\n      }\n      const notificationPromises = [];\n      for (let i = notifications.length - 1; i >= 0; i--) {\n        notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\n      }\n      Promise.all(notificationPromises).then(resolve); // Done\n    });\n  }\n  /**\n   * Add a new notification to the list of notifications (triggers change detection)\n   *\n   * @param notification Notification to add to the list of notifications\n   */\n  addNotificationToList(notification) {\n    this.notifications.push(notification);\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n  }\n  /**\n   * Remove an existing notification from the list of notifications (triggers change detection)\n   *\n   * @param notification Notification to be removed from the list of notifications\n   */\n  removeNotificationFromList(notification) {\n    this.notifications = this.notifications.filter(item => item.component !== notification.component);\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n  }\n  /**\n   * Remove all notifications from the list (triggers change detection)\n   */\n  removeAllNotificationsFromList() {\n    this.notifications = [];\n    this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n  }\n  /**\n   * Helper: Find a notification in the notification list by a given notification ID\n   *\n   * @param   notificationId Notification ID, used for finding notification\n   * @returns Notification, undefined if not found\n   */\n  findNotificationById(notificationId) {\n    return this.notifications.find(currentNotification => currentNotification.id === notificationId);\n  }\n  /**\n   * Helper: Find a notification's index by a given notification ID\n   *\n   * @param   notificationId Notification ID, used for finding a notification's index\n   * @returns Notification index, undefined if not found\n   */\n  findNotificationIndexById(notificationId) {\n    const notificationIndex = this.notifications.findIndex(currentNotification => currentNotification.id === notificationId);\n    return notificationIndex !== -1 ? notificationIndex : undefined;\n  }\n}\nNotifierContainerComponent.ɵfac = function NotifierContainerComponent_Factory(t) {\n  return new (t || NotifierContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(NotifierQueueService), i0.ɵɵdirectiveInject(NotifierService));\n};\nNotifierContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NotifierContainerComponent,\n  selectors: [[\"notifier-container\"]],\n  hostAttrs: [1, \"notifier__container\"],\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"notifier__container-list\"], [\"class\", \"notifier__container-list-item\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"notifier__container-list-item\"], [3, \"notification\", \"ready\", \"dismiss\"]],\n  template: function NotifierContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ul\", 0);\n      i0.ɵɵtemplate(1, NotifierContainerComponent_li_1_Template, 2, 1, \"li\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.notifications)(\"ngForTrackBy\", ctx.identifyNotification);\n    }\n  },\n  dependencies: [i4.NgForOf, NotifierNotificationComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NotifierContainerComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'notifier__container'\n      },\n      selector: 'notifier-container',\n      template: \"<ul class=\\\"notifier__container-list\\\">\\n  <li class=\\\"notifier__container-list-item\\\" *ngFor=\\\"let notification of notifications; trackBy: identifyNotification\\\">\\n    <notifier-notification [notification]=\\\"notification\\\" (ready)=\\\"onNotificationReady($event)\\\" (dismiss)=\\\"onNotificationDismiss($event)\\\">\\n    </notifier-notification>\\n  </li>\\n</ul>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: NotifierQueueService\n    }, {\n      type: NotifierService\n    }];\n  }, null);\n})();\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\nfunction notifierCustomConfigFactory(options) {\n  return new NotifierConfig(options);\n}\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\nfunction notifierDefaultConfigFactory() {\n  return new NotifierConfig({});\n}\n/**\n * Notifier module\n */\nclass NotifierModule {\n  /**\n   * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n   *\n   * @param   [options={}] - Custom notifier options\n   * @returns - Notifier module with custom providers\n   */\n  static withConfig(options = {}) {\n    return {\n      ngModule: NotifierModule,\n      providers: [\n      // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n      {\n        provide: NotifierOptionsToken,\n        useValue: options\n      },\n      // Provide a custom notifier configuration, based on the given notifier options\n      {\n        deps: [NotifierOptionsToken],\n        provide: NotifierConfigToken,\n        useFactory: notifierCustomConfigFactory\n      }]\n    };\n  }\n}\nNotifierModule.ɵfac = function NotifierModule_Factory(t) {\n  return new (t || NotifierModule)();\n};\nNotifierModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NotifierModule\n});\nNotifierModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NotifierAnimationService, NotifierService, NotifierQueueService,\n  // Provide the default notifier configuration if just the module is imported\n  {\n    provide: NotifierConfigToken,\n    useFactory: notifierDefaultConfigFactory\n  }],\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NotifierModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NotifierContainerComponent, NotifierNotificationComponent],\n      exports: [NotifierContainerComponent],\n      imports: [CommonModule],\n      providers: [NotifierAnimationService, NotifierService, NotifierQueueService,\n      // Provide the default notifier configuration if just the module is imported\n      {\n        provide: NotifierConfigToken,\n        useFactory: notifierDefaultConfigFactory\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NotifierConfig, NotifierConfigToken, NotifierContainerComponent, NotifierModule, NotifierNotificationComponent, NotifierOptionsToken, NotifierService, notifierCustomConfigFactory, notifierDefaultConfigFactory };","map":{"version":3,"names":["i0","Injectable","InjectionToken","Inject","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","NgModule","Subject","i4","CommonModule","NotifierNotification","constructor","options","template","Object","assign","id","undefined","Date","getTime","NotifierQueueService","actionStream","actionQueue","isActionInProgress","push","action","tryToRunNextAction","continue","length","next","shift","ɵfac","ɵprov","type","NotifierOptionsToken","NotifierConfigToken","NotifierConfig","customOptions","animations","enabled","hide","easing","offset","preset","speed","overlap","show","behaviour","autoHide","onClick","onMouseover","showDismissButton","stacking","position","horizontal","distance","vertical","gap","theme","NotifierService","notifierQueueService","config","queueService","getConfig","asObservable","notificationOptions","payload","notificationId","hideNewest","hideOldest","hideAll","notify","message","decorators","args","NotifierTimerService","now","remaining","start","duration","Promise","resolve","finishPromiseResolver","pause","clearTimeout","timerId","window","setTimeout","finish","stop","fade","from","opacity","to","slide","notification","component","getShift","transform","horizontalPosition","NotifierAnimationService","animationPresets","getAnimationData","direction","keyframes","fill","NotifierNotificationComponent","elementRef","renderer","notifierService","notifierTimerService","notifierAnimationService","ready","dismiss","timerService","animationService","element","nativeElement","elementShift","ngAfterViewInit","setup","elementHeight","offsetHeight","elementWidth","offsetWidth","emit","getHeight","getWidth","animationData","animatedProperties","keys","i","setStyle","animation","animate","onfinish","startAutoHideTimer","stopAutoHideTimer","shiftToMakePlace","newElementShift","onClickDismiss","onNotificationMouseover","pauseAutoHideTimer","onNotificationMouseout","continueAutoHideTimer","onNotificationClick","then","addClass","ElementRef","Renderer2","ɵcmp","NgIf","NgTemplateOutlet","changeDetection","OnPush","host","class","providers","selector","NotifierContainerComponent","changeDetector","notifications","queueServiceSubscription","subscribe","handleAction","ngOnDestroy","unsubscribe","identifyNotification","index","onNotificationDismiss","onNotificationReady","notificationComponent","currentNotification","continueHandleShowAction","handleShowAction","handleHideAction","handleHideOldestAction","handleHideNewestAction","handleHideAllAction","tempPromiseResolver","addNotificationToList","numberOfNotifications","implicitStackingLimit","removeNotificationFromList","stepPromises","oldNotifications","slice","shiftNotifications","all","findNotificationById","notificationIndex","findNotificationIndexById","animationOffset","removeAllNotificationsFromList","toMakePlace","notificationPromises","markForCheck","filter","item","find","findIndex","ChangeDetectorRef","NgForOf","notifierCustomConfigFactory","notifierDefaultConfigFactory","NotifierModule","withConfig","ngModule","provide","useValue","deps","useFactory","ɵmod","ɵinj","declarations","exports","imports"],"sources":["G:/Interviews/LuftBORN/LUFTBORN_Test_Backend/LUFTBORN_Test_Frontend/node_modules/angular-notifier/fesm2020/angular-notifier.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nclass NotifierNotification {\n    /**\n     * Constructor\n     *\n     * @param options Notifier options\n     */\n    constructor(options) {\n        /**\n         * The template to customize\n         * the appearance of the notification\n         */\n        this.template = null;\n        Object.assign(this, options);\n        // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n        // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n        // is not possible due to the action queue concept.\n        if (options.id === undefined) {\n            this.id = `ID_${new Date().getTime()}`;\n        }\n    }\n}\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\nclass NotifierQueueService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.actionStream = new Subject();\n        this.actionQueue = [];\n        this.isActionInProgress = false;\n    }\n    /**\n     * Push a new action to the queue, and try to run it\n     *\n     * @param action Action object\n     */\n    push(action) {\n        this.actionQueue.push(action);\n        this.tryToRunNextAction();\n    }\n    /**\n     * Continue with the next action (called when the current action is finished)\n     */\n    continue() {\n        this.isActionInProgress = false;\n        this.tryToRunNextAction();\n    }\n    /**\n     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n     */\n    tryToRunNextAction() {\n        if (this.isActionInProgress || this.actionQueue.length === 0) {\n            return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n        }\n        this.isActionInProgress = true;\n        this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\n    }\n}\nNotifierQueueService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierQueueService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNotifierQueueService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierQueueService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierQueueService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Injection Token for notifier options\n */\nconst NotifierOptionsToken = new InjectionToken('[angular-notifier] Notifier Options');\n/**\n * Injection Token for notifier configuration\n */\nconst NotifierConfigToken = new InjectionToken('[anuglar-notifier] Notifier Config');\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nclass NotifierConfig {\n    /**\n     * Constructor\n     *\n     * @param [customOptions={}] Custom notifier options, optional\n     */\n    constructor(customOptions = {}) {\n        // Set default values\n        this.animations = {\n            enabled: true,\n            hide: {\n                easing: 'ease',\n                offset: 50,\n                preset: 'fade',\n                speed: 300,\n            },\n            overlap: 150,\n            shift: {\n                easing: 'ease',\n                speed: 300,\n            },\n            show: {\n                easing: 'ease',\n                preset: 'slide',\n                speed: 300,\n            },\n        };\n        this.behaviour = {\n            autoHide: 7000,\n            onClick: false,\n            onMouseover: 'pauseAutoHide',\n            showDismissButton: true,\n            stacking: 4,\n        };\n        this.position = {\n            horizontal: {\n                distance: 12,\n                position: 'left',\n            },\n            vertical: {\n                distance: 12,\n                gap: 10,\n                position: 'bottom',\n            },\n        };\n        this.theme = 'material';\n        // The following merges the custom options into the notifier config, respecting the already set default values\n        // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n        // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n        if (customOptions.theme !== undefined) {\n            this.theme = customOptions.theme;\n        }\n        if (customOptions.animations !== undefined) {\n            if (customOptions.animations.enabled !== undefined) {\n                this.animations.enabled = customOptions.animations.enabled;\n            }\n            if (customOptions.animations.overlap !== undefined) {\n                this.animations.overlap = customOptions.animations.overlap;\n            }\n            if (customOptions.animations.hide !== undefined) {\n                Object.assign(this.animations.hide, customOptions.animations.hide);\n            }\n            if (customOptions.animations.shift !== undefined) {\n                Object.assign(this.animations.shift, customOptions.animations.shift);\n            }\n            if (customOptions.animations.show !== undefined) {\n                Object.assign(this.animations.show, customOptions.animations.show);\n            }\n        }\n        if (customOptions.behaviour !== undefined) {\n            Object.assign(this.behaviour, customOptions.behaviour);\n        }\n        if (customOptions.position !== undefined) {\n            if (customOptions.position.horizontal !== undefined) {\n                Object.assign(this.position.horizontal, customOptions.position.horizontal);\n            }\n            if (customOptions.position.vertical !== undefined) {\n                Object.assign(this.position.vertical, customOptions.position.vertical);\n            }\n        }\n    }\n}\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\nclass NotifierService {\n    /**\n     * Constructor\n     *\n     * @param notifierQueueService Notifier queue service\n     * @param config               Notifier configuration, optionally injected as a dependency\n     */\n    constructor(notifierQueueService, config) {\n        this.queueService = notifierQueueService;\n        this.config = config;\n    }\n    /**\n     * Get the notifier configuration\n     *\n     * @returns Notifier configuration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Get the observable for handling actions\n     *\n     * @returns Observable of NotifierAction\n     */\n    get actionStream() {\n        return this.queueService.actionStream.asObservable();\n    }\n    /**\n     * API: Show a new notification\n     *\n     * @param notificationOptions Notification options\n     */\n    show(notificationOptions) {\n        this.queueService.push({\n            payload: notificationOptions,\n            type: 'SHOW',\n        });\n    }\n    /**\n     * API: Hide a specific notification, given its ID\n     *\n     * @param notificationId ID of the notification to hide\n     */\n    hide(notificationId) {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE',\n        });\n    }\n    /**\n     * API: Hide the newest notification\n     */\n    hideNewest() {\n        this.queueService.push({\n            type: 'HIDE_NEWEST',\n        });\n    }\n    /**\n     * API: Hide the oldest notification\n     */\n    hideOldest() {\n        this.queueService.push({\n            type: 'HIDE_OLDEST',\n        });\n    }\n    /**\n     * API: Hide all notifications at once\n     */\n    hideAll() {\n        this.queueService.push({\n            type: 'HIDE_ALL',\n        });\n    }\n    /**\n     * API: Shortcut for showing a new notification\n     *\n     * @param type             Type of the notification\n     * @param message          Message of the notification\n     * @param [notificationId] Unique ID for the notification (optional)\n     */\n    notify(type, message, notificationId) {\n        const notificationOptions = {\n            message,\n            type,\n        };\n        if (notificationId !== undefined) {\n            notificationOptions.id = notificationId;\n        }\n        this.show(notificationOptions);\n    }\n}\nNotifierService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierService, deps: [{ token: NotifierQueueService }, { token: NotifierConfigToken }], target: i0.ɵɵFactoryTarget.Injectable });\nNotifierService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NotifierQueueService }, { type: NotifierConfig, decorators: [{\n                    type: Inject,\n                    args: [NotifierConfigToken]\n                }] }]; } });\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\nclass NotifierTimerService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.now = 0;\n        this.remaining = 0;\n    }\n    /**\n     * Start (or resume) the timer\n     *\n     * @param   duration Timer duration, in ms\n     * @returns          Promise, resolved once the timer finishes\n     */\n    start(duration) {\n        return new Promise((resolve) => {\n            // For the first run ...\n            this.remaining = duration;\n            // Setup, then start the timer\n            this.finishPromiseResolver = resolve;\n            this.continue();\n        });\n    }\n    /**\n     * Pause the timer\n     */\n    pause() {\n        clearTimeout(this.timerId);\n        this.remaining -= new Date().getTime() - this.now;\n    }\n    /**\n     * Continue the timer\n     */\n    continue() {\n        this.now = new Date().getTime();\n        this.timerId = window.setTimeout(() => {\n            this.finish();\n        }, this.remaining);\n    }\n    /**\n     * Stop the timer\n     */\n    stop() {\n        clearTimeout(this.timerId);\n        this.remaining = 0;\n    }\n    /**\n     * Finish up the timeout by resolving the timer promise\n     */\n    finish() {\n        this.finishPromiseResolver();\n    }\n}\nNotifierTimerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierTimerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNotifierTimerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierTimerService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierTimerService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Fade animation preset\n */\nconst fade = {\n    hide: () => {\n        return {\n            from: {\n                opacity: '1',\n            },\n            to: {\n                opacity: '0',\n            },\n        };\n    },\n    show: () => {\n        return {\n            from: {\n                opacity: '0',\n            },\n            to: {\n                opacity: '1',\n            },\n        };\n    },\n};\n\n/**\n * Slide animation preset\n */\nconst slide = {\n    hide: (notification) => {\n        // Prepare variables\n        const config = notification.component.getConfig();\n        const shift = notification.component.getShift();\n        let from;\n        let to;\n        // Configure variables, depending on configuration and component\n        if (config.position.horizontal.position === 'left') {\n            from = {\n                transform: `translate3d( 0, ${shift}px, 0 )`,\n            };\n            to = {\n                transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`,\n            };\n        }\n        else if (config.position.horizontal.position === 'right') {\n            from = {\n                transform: `translate3d( 0, ${shift}px, 0 )`,\n            };\n            to = {\n                transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`,\n            };\n        }\n        else {\n            let horizontalPosition;\n            if (config.position.vertical.position === 'top') {\n                horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n            }\n            else {\n                horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n            }\n            from = {\n                transform: `translate3d( -50%, ${shift}px, 0 )`,\n            };\n            to = {\n                transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\n            };\n        }\n        // Done\n        return {\n            from,\n            to,\n        };\n    },\n    show: (notification) => {\n        // Prepare variables\n        const config = notification.component.getConfig();\n        let from;\n        let to;\n        // Configure variables, depending on configuration and component\n        if (config.position.horizontal.position === 'left') {\n            from = {\n                transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`,\n            };\n            to = {\n                transform: 'translate3d( 0, 0, 0 )',\n            };\n        }\n        else if (config.position.horizontal.position === 'right') {\n            from = {\n                transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`,\n            };\n            to = {\n                transform: 'translate3d( 0, 0, 0 )',\n            };\n        }\n        else {\n            let horizontalPosition;\n            if (config.position.vertical.position === 'top') {\n                horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n            }\n            else {\n                horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n            }\n            from = {\n                transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\n            };\n            to = {\n                transform: 'translate3d( -50%, 0, 0 )',\n            };\n        }\n        // Done\n        return {\n            from,\n            to,\n        };\n    },\n};\n\n/**\n * Notifier animation service\n */\nclass NotifierAnimationService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.animationPresets = {\n            fade,\n            slide,\n        };\n    }\n    /**\n     * Get animation data\n     *\n     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n     * direction (either in or out) as well as the notifications (and its attributes) itself.\n     *\n     * @param   direction    Animation direction, either in or out\n     * @param   notification Notification the animation data should be generated for\n     * @returns Animation information\n     */\n    getAnimationData(direction, notification) {\n        // Get all necessary animation data\n        let keyframes;\n        let duration;\n        let easing;\n        if (direction === 'show') {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n            duration = notification.component.getConfig().animations.show.speed;\n            easing = notification.component.getConfig().animations.show.easing;\n        }\n        else {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n            duration = notification.component.getConfig().animations.hide.speed;\n            easing = notification.component.getConfig().animations.hide.easing;\n        }\n        // Build and return animation data\n        return {\n            keyframes: [keyframes.from, keyframes.to],\n            options: {\n                duration,\n                easing,\n                fill: 'forwards', // Keep the newly painted state after the animation finished\n            },\n        };\n    }\n}\nNotifierAnimationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierAnimationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNotifierAnimationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierAnimationService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierAnimationService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\nclass NotifierNotificationComponent {\n    /**\n     * Constructor\n     *\n     * @param elementRef               Reference to the component's element\n     * @param renderer                 Angular renderer\n     * @param notifierService          Notifier service\n     * @param notifierTimerService     Notifier timer service\n     * @param notifierAnimationService Notifier animation service\n     */\n    constructor(elementRef, renderer, notifierService, notifierTimerService, notifierAnimationService) {\n        this.config = notifierService.getConfig();\n        this.ready = new EventEmitter();\n        this.dismiss = new EventEmitter();\n        this.timerService = notifierTimerService;\n        this.animationService = notifierAnimationService;\n        this.renderer = renderer;\n        this.element = elementRef.nativeElement;\n        this.elementShift = 0;\n    }\n    /**\n     * Component after view init lifecycle hook, setts up the component and then emits the ready event\n     */\n    ngAfterViewInit() {\n        this.setup();\n        this.elementHeight = this.element.offsetHeight;\n        this.elementWidth = this.element.offsetWidth;\n        this.ready.emit(this);\n    }\n    /**\n     * Get the notifier config\n     *\n     * @returns Notifier configuration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Get notification element height (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n    getHeight() {\n        return this.elementHeight;\n    }\n    /**\n     * Get notification element width (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n    getWidth() {\n        return this.elementWidth;\n    }\n    /**\n     * Get notification shift offset (in px)\n     *\n     * @returns Notification element shift offset (in px)\n     */\n    getShift() {\n        return this.elementShift;\n    }\n    /**\n     * Show (animate in) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n    show() {\n        return new Promise((resolve) => {\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.show.speed > 0) {\n                // Get animation data\n                const animationData = this.animationService.getAnimationData('show', this.notification);\n                // Set initial styles (styles before animation), prevents quick flicker when animation starts\n                const animatedProperties = Object.keys(animationData.keyframes[0]);\n                for (let i = animatedProperties.length - 1; i >= 0; i--) {\n                    this.renderer.setStyle(this.element, animatedProperties[i], animationData.keyframes[0][animatedProperties[i]]);\n                }\n                // Animate notification in\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    this.startAutoHideTimer();\n                    resolve(); // Done\n                };\n            }\n            else {\n                // Show notification\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                this.startAutoHideTimer();\n                resolve(); // Done\n            }\n        });\n    }\n    /**\n     * Hide (animate out) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n    hide() {\n        return new Promise((resolve) => {\n            this.stopAutoHideTimer();\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n                const animationData = this.animationService.getAnimationData('hide', this.notification);\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    resolve(); // Done\n                };\n            }\n            else {\n                resolve(); // Done\n            }\n        });\n    }\n    /**\n     * Shift (move) this notification\n     *\n     * @param   distance         Distance to shift (in px)\n     * @param   shiftToMakePlace Flag, defining in which direction to shift\n     * @returns Promise, resolved when done\n     */\n    shift(distance, shiftToMakePlace) {\n        return new Promise((resolve) => {\n            // Calculate new position (position after the shift)\n            let newElementShift;\n            if ((this.config.position.vertical.position === 'top' && shiftToMakePlace) ||\n                (this.config.position.vertical.position === 'bottom' && !shiftToMakePlace)) {\n                newElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n            }\n            else {\n                newElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n            }\n            const horizontalPosition = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {\n                const animationData = {\n                    // TODO: Extract into animation service\n                    keyframes: [\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`,\n                        },\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`,\n                        },\n                    ],\n                    options: {\n                        duration: this.config.animations.shift.speed,\n                        easing: this.config.animations.shift.easing,\n                        fill: 'forwards',\n                    },\n                };\n                this.elementShift = newElementShift;\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    resolve(); // Done\n                };\n            }\n            else {\n                this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);\n                this.elementShift = newElementShift;\n                resolve(); // Done\n            }\n        });\n    }\n    /**\n     * Handle click on dismiss button\n     */\n    onClickDismiss() {\n        this.dismiss.emit(this.notification.id);\n    }\n    /**\n     * Handle mouseover over notification area\n     */\n    onNotificationMouseover() {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.pauseAutoHideTimer();\n        }\n        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.stopAutoHideTimer();\n        }\n    }\n    /**\n     * Handle mouseout from notification area\n     */\n    onNotificationMouseout() {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.continueAutoHideTimer();\n        }\n        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.startAutoHideTimer();\n        }\n    }\n    /**\n     * Handle click on notification area\n     */\n    onNotificationClick() {\n        if (this.config.behaviour.onClick === 'hide') {\n            this.onClickDismiss();\n        }\n    }\n    /**\n     * Start the auto hide timer (if enabled)\n     */\n    startAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.start(this.config.behaviour.autoHide).then(() => {\n                this.onClickDismiss();\n            });\n        }\n    }\n    /**\n     * Pause the auto hide timer (if enabled)\n     */\n    pauseAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.pause();\n        }\n    }\n    /**\n     * Continue the auto hide timer (if enabled)\n     */\n    continueAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.continue();\n        }\n    }\n    /**\n     * Stop the auto hide timer (if enabled)\n     */\n    stopAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.stop();\n        }\n    }\n    /**\n     * Initial notification setup\n     */\n    setup() {\n        // Set start position (initially the exact same for every new notification)\n        if (this.config.position.horizontal.position === 'left') {\n            this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);\n        }\n        else if (this.config.position.horizontal.position === 'right') {\n            this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);\n        }\n        else {\n            this.renderer.setStyle(this.element, 'left', '50%');\n            // Let's get the GPU handle some work as well (#perfmatters)\n            this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\n        }\n        if (this.config.position.vertical.position === 'top') {\n            this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);\n        }\n        else {\n            this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);\n        }\n        // Add classes (responsible for visual design)\n        this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);\n        this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);\n    }\n}\nNotifierNotificationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierNotificationComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NotifierService }, { token: NotifierTimerService }, { token: NotifierAnimationService }], target: i0.ɵɵFactoryTarget.Component });\nNotifierNotificationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.1\", type: NotifierNotificationComponent, selector: \"notifier-notification\", inputs: { notification: \"notification\" }, outputs: { ready: \"ready\", dismiss: \"dismiss\" }, host: { listeners: { \"click\": \"onNotificationClick()\", \"mouseout\": \"onNotificationMouseout()\", \"mouseover\": \"onNotificationMouseover()\" }, classAttribute: \"notifier__notification\" }, providers: [\n        // We provide the timer to the component's local injector, so that every notification components gets its own\n        // instance of the timer service, thus running their timers independently from each other\n        NotifierTimerService,\n    ], ngImport: i0, template: \"<ng-container\\n  *ngIf=\\\"notification.template; else predefinedNotification\\\"\\n  [ngTemplateOutlet]=\\\"notification.template\\\"\\n  [ngTemplateOutletContext]=\\\"{ notification: notification }\\\"\\n>\\n</ng-container>\\n\\n<ng-template #predefinedNotification>\\n  <p class=\\\"notifier__notification-message\\\">{{ notification.message }}</p>\\n  <button\\n    class=\\\"notifier__notification-button\\\"\\n    type=\\\"button\\\"\\n    title=\\\"dismiss\\\"\\n    *ngIf=\\\"config.behaviour.showDismissButton\\\"\\n    (click)=\\\"onClickDismiss()\\\"\\n  >\\n    <svg class=\\\"notifier__notification-button-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"20\\\" height=\\\"20\\\">\\n      <path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\" />\\n    </svg>\\n  </button>\\n</ng-template>\\n\", dependencies: [{ kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i4.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierNotificationComponent, decorators: [{\n            type: Component,\n            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        '(click)': 'onNotificationClick()',\n                        '(mouseout)': 'onNotificationMouseout()',\n                        '(mouseover)': 'onNotificationMouseover()',\n                        class: 'notifier__notification',\n                    }, providers: [\n                        // We provide the timer to the component's local injector, so that every notification components gets its own\n                        // instance of the timer service, thus running their timers independently from each other\n                        NotifierTimerService,\n                    ], selector: 'notifier-notification', template: \"<ng-container\\n  *ngIf=\\\"notification.template; else predefinedNotification\\\"\\n  [ngTemplateOutlet]=\\\"notification.template\\\"\\n  [ngTemplateOutletContext]=\\\"{ notification: notification }\\\"\\n>\\n</ng-container>\\n\\n<ng-template #predefinedNotification>\\n  <p class=\\\"notifier__notification-message\\\">{{ notification.message }}</p>\\n  <button\\n    class=\\\"notifier__notification-button\\\"\\n    type=\\\"button\\\"\\n    title=\\\"dismiss\\\"\\n    *ngIf=\\\"config.behaviour.showDismissButton\\\"\\n    (click)=\\\"onClickDismiss()\\\"\\n  >\\n    <svg class=\\\"notifier__notification-button-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"20\\\" height=\\\"20\\\">\\n      <path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\" />\\n    </svg>\\n  </button>\\n</ng-template>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: NotifierService }, { type: NotifierTimerService }, { type: NotifierAnimationService }]; }, propDecorators: { notification: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], dismiss: [{\n                type: Output\n            }] } });\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\nclass NotifierContainerComponent {\n    /**\n     * Constructor\n     *\n     * @param changeDetector       Change detector, used for manually triggering change detection runs\n     * @param notifierQueueService Notifier queue service\n     * @param notifierService      Notifier service\n     */\n    constructor(changeDetector, notifierQueueService, notifierService) {\n        this.changeDetector = changeDetector;\n        this.queueService = notifierQueueService;\n        this.config = notifierService.getConfig();\n        this.notifications = [];\n        // Connects this component up to the action queue, then handle incoming actions\n        this.queueServiceSubscription = this.queueService.actionStream.subscribe((action) => {\n            this.handleAction(action).then(() => {\n                this.queueService.continue();\n            });\n        });\n    }\n    /**\n     * Component destroyment lifecycle hook, cleans up the observable subsciption\n     */\n    ngOnDestroy() {\n        if (this.queueServiceSubscription) {\n            this.queueServiceSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Notification identifier, used as the ngFor trackby function\n     *\n     * @param   index        Index\n     * @param   notification Notifier notification\n     * @returns Notification ID as the unique identnfier\n     */\n    identifyNotification(index, notification) {\n        return notification.id;\n    }\n    /**\n     * Event handler, handles clicks on notification dismiss buttons\n     *\n     * @param notificationId ID of the notification to dismiss\n     */\n    onNotificationDismiss(notificationId) {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE',\n        });\n    }\n    /**\n     * Event handler, handles notification ready events\n     *\n     * @param notificationComponent Notification component reference\n     */\n    onNotificationReady(notificationComponent) {\n        const currentNotification = this.notifications[this.notifications.length - 1]; // Get the latest notification\n        currentNotification.component = notificationComponent; // Save the new omponent reference\n        this.continueHandleShowAction(currentNotification); // Continue with handling the show action\n    }\n    /**\n     * Handle incoming actions by mapping action types to methods, and then running them\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleAction(action) {\n        switch (action.type // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n        ) {\n            case 'SHOW':\n                return this.handleShowAction(action);\n            case 'HIDE':\n                return this.handleHideAction(action);\n            case 'HIDE_OLDEST':\n                return this.handleHideOldestAction(action);\n            case 'HIDE_NEWEST':\n                return this.handleHideNewestAction(action);\n            case 'HIDE_ALL':\n                return this.handleHideAllAction();\n            default:\n                return new Promise((resolve) => {\n                    resolve(); // Ignore unknown action types\n                });\n        }\n    }\n    /**\n     * Show a new notification\n     *\n     * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleShowAction(action) {\n        return new Promise((resolve) => {\n            this.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n            this.addNotificationToList(new NotifierNotification(action.payload));\n        });\n    }\n    /**\n     * Continue to show a new notification (after the notification components is initialized / created / rendered).\n     *\n     * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n     * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n     * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n     * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n     *\n     * @param notification New notification to show\n     */\n    continueHandleShowAction(notification) {\n        // First (which means only one) notification in the list?\n        const numberOfNotifications = this.notifications.length;\n        if (numberOfNotifications === 1) {\n            notification.component.show().then(this.tempPromiseResolver); // Done\n        }\n        else {\n            const implicitStackingLimit = 2;\n            // Stacking enabled? (stacking value below 2 means stacking is disabled)\n            if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\n                this.notifications[0].component.hide().then(() => {\n                    this.removeNotificationFromList(this.notifications[0]);\n                    notification.component.show().then(this.tempPromiseResolver); // Done\n                });\n            }\n            else {\n                const stepPromises = [];\n                // Are there now too many notifications?\n                if (numberOfNotifications > this.config.behaviour.stacking) {\n                    const oldNotifications = this.notifications.slice(1, numberOfNotifications - 1);\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.notifications[0].component.hide());\n                            setTimeout(() => {\n                                stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            }, this.config.animations.hide.speed - this.config.animations.overlap);\n                            setTimeout(() => {\n                                stepPromises.push(notification.component.show());\n                            }, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\n                        }\n                        else {\n                            stepPromises.push(new Promise((resolve) => {\n                                this.notifications[0].component.hide().then(() => {\n                                    this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                                        notification.component.show().then(resolve);\n                                    });\n                                });\n                            }));\n                        }\n                    }\n                    else {\n                        stepPromises.push(this.notifications[0].component.hide());\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n                }\n                else {\n                    const oldNotifications = this.notifications.slice(0, numberOfNotifications - 1);\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            setTimeout(() => {\n                                stepPromises.push(notification.component.show());\n                            }, this.config.animations.shift.speed - this.config.animations.overlap);\n                        }\n                        else {\n                            stepPromises.push(new Promise((resolve) => {\n                                this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                                    notification.component.show().then(resolve);\n                                });\n                            }));\n                        }\n                    }\n                    else {\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n                }\n                Promise.all(stepPromises).then(() => {\n                    if (numberOfNotifications > this.config.behaviour.stacking) {\n                        this.removeNotificationFromList(this.notifications[0]);\n                    }\n                    this.tempPromiseResolver();\n                }); // Done\n            }\n        }\n    }\n    /**\n     * Hide an existing notification\n     *\n     * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n     * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n     * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n     *\n     * @param   action Action object, payload contains the notification ID\n     * @returns Promise, resolved when done\n     */\n    handleHideAction(action) {\n        return new Promise((resolve) => {\n            const stepPromises = [];\n            // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n            const notification = this.findNotificationById(action.payload);\n            if (notification === undefined) {\n                resolve();\n                return;\n            }\n            // Get older notifications\n            const notificationIndex = this.findNotificationIndexById(action.payload);\n            if (notificationIndex === undefined) {\n                resolve();\n                return;\n            }\n            const oldNotifications = this.notifications.slice(0, notificationIndex);\n            // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n            if (oldNotifications.length > 0) {\n                // Are animations enabled?\n                if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n                    // Is animation overlap enabled?\n                    if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                        stepPromises.push(notification.component.hide());\n                        setTimeout(() => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        }, this.config.animations.hide.speed - this.config.animations.overlap);\n                    }\n                    else {\n                        notification.component.hide().then(() => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        });\n                    }\n                }\n                else {\n                    stepPromises.push(notification.component.hide());\n                    stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                }\n            }\n            else {\n                stepPromises.push(notification.component.hide());\n            }\n            // Wait until both hiding and shifting is done, then remove the notification from the list\n            Promise.all(stepPromises).then(() => {\n                this.removeNotificationFromList(notification);\n                resolve(); // Done\n            });\n        });\n    }\n    /**\n     * Hide the oldest notification (bridge to handleHideAction)\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleHideOldestAction(action) {\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise((resolve) => {\n                resolve();\n            }); // Done\n        }\n        else {\n            action.payload = this.notifications[0].id;\n            return this.handleHideAction(action);\n        }\n    }\n    /**\n     * Hide the newest notification (bridge to handleHideAction)\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleHideNewestAction(action) {\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise((resolve) => {\n                resolve();\n            }); // Done\n        }\n        else {\n            action.payload = this.notifications[this.notifications.length - 1].id;\n            return this.handleHideAction(action);\n        }\n    }\n    /**\n     * Hide all notifications at once\n     *\n     * @returns Promise, resolved when done\n     */\n    handleHideAllAction() {\n        return new Promise((resolve) => {\n            // Are there any notifications? (prevent accidential errors)\n            const numberOfNotifications = this.notifications.length;\n            if (numberOfNotifications === 0) {\n                resolve(); // Done\n                return;\n            }\n            // Are animations enabled?\n            if (this.config.animations.enabled &&\n                this.config.animations.hide.speed > 0 &&\n                this.config.animations.hide.offset !== false &&\n                this.config.animations.hide.offset > 0) {\n                for (let i = numberOfNotifications - 1; i >= 0; i--) {\n                    const animationOffset = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n                    setTimeout(() => {\n                        this.notifications[i].component.hide().then(() => {\n                            // Are we done here, was this the last notification to be hidden?\n                            if ((this.config.position.vertical.position === 'top' && i === 0) ||\n                                (this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1)) {\n                                this.removeAllNotificationsFromList();\n                                resolve(); // Done\n                            }\n                        });\n                    }, this.config.animations.hide.offset * animationOffset);\n                }\n            }\n            else {\n                const stepPromises = [];\n                for (let i = numberOfNotifications - 1; i >= 0; i--) {\n                    stepPromises.push(this.notifications[i].component.hide());\n                }\n                Promise.all(stepPromises).then(() => {\n                    this.removeAllNotificationsFromList();\n                    resolve(); // Done\n                });\n            }\n        });\n    }\n    /**\n     * Shift multiple notifications at once\n     *\n     * @param   notifications List containing the notifications to be shifted\n     * @param   distance      Distance to shift (in px)\n     * @param   toMakePlace   Flag, defining in which direciton to shift\n     * @returns Promise, resolved when done\n     */\n    shiftNotifications(notifications, distance, toMakePlace) {\n        return new Promise((resolve) => {\n            // Are there any notifications to shift?\n            if (notifications.length === 0) {\n                resolve();\n                return;\n            }\n            const notificationPromises = [];\n            for (let i = notifications.length - 1; i >= 0; i--) {\n                notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\n            }\n            Promise.all(notificationPromises).then(resolve); // Done\n        });\n    }\n    /**\n     * Add a new notification to the list of notifications (triggers change detection)\n     *\n     * @param notification Notification to add to the list of notifications\n     */\n    addNotificationToList(notification) {\n        this.notifications.push(notification);\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove an existing notification from the list of notifications (triggers change detection)\n     *\n     * @param notification Notification to be removed from the list of notifications\n     */\n    removeNotificationFromList(notification) {\n        this.notifications = this.notifications.filter((item) => item.component !== notification.component);\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove all notifications from the list (triggers change detection)\n     */\n    removeAllNotificationsFromList() {\n        this.notifications = [];\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Helper: Find a notification in the notification list by a given notification ID\n     *\n     * @param   notificationId Notification ID, used for finding notification\n     * @returns Notification, undefined if not found\n     */\n    findNotificationById(notificationId) {\n        return this.notifications.find((currentNotification) => currentNotification.id === notificationId);\n    }\n    /**\n     * Helper: Find a notification's index by a given notification ID\n     *\n     * @param   notificationId Notification ID, used for finding a notification's index\n     * @returns Notification index, undefined if not found\n     */\n    findNotificationIndexById(notificationId) {\n        const notificationIndex = this.notifications.findIndex((currentNotification) => currentNotification.id === notificationId);\n        return notificationIndex !== -1 ? notificationIndex : undefined;\n    }\n}\nNotifierContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierContainerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: NotifierQueueService }, { token: NotifierService }], target: i0.ɵɵFactoryTarget.Component });\nNotifierContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.1\", type: NotifierContainerComponent, selector: \"notifier-container\", host: { classAttribute: \"notifier__container\" }, ngImport: i0, template: \"<ul class=\\\"notifier__container-list\\\">\\n  <li class=\\\"notifier__container-list-item\\\" *ngFor=\\\"let notification of notifications; trackBy: identifyNotification\\\">\\n    <notifier-notification [notification]=\\\"notification\\\" (ready)=\\\"onNotificationReady($event)\\\" (dismiss)=\\\"onNotificationDismiss($event)\\\">\\n    </notifier-notification>\\n  </li>\\n</ul>\\n\", dependencies: [{ kind: \"directive\", type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"component\", type: NotifierNotificationComponent, selector: \"notifier-notification\", inputs: [\"notification\"], outputs: [\"ready\", \"dismiss\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierContainerComponent, decorators: [{\n            type: Component,\n            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        class: 'notifier__container',\n                    }, selector: 'notifier-container', template: \"<ul class=\\\"notifier__container-list\\\">\\n  <li class=\\\"notifier__container-list-item\\\" *ngFor=\\\"let notification of notifications; trackBy: identifyNotification\\\">\\n    <notifier-notification [notification]=\\\"notification\\\" (ready)=\\\"onNotificationReady($event)\\\" (dismiss)=\\\"onNotificationDismiss($event)\\\">\\n    </notifier-notification>\\n  </li>\\n</ul>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: NotifierQueueService }, { type: NotifierService }]; } });\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\nfunction notifierCustomConfigFactory(options) {\n    return new NotifierConfig(options);\n}\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\nfunction notifierDefaultConfigFactory() {\n    return new NotifierConfig({});\n}\n/**\n * Notifier module\n */\nclass NotifierModule {\n    /**\n     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n     *\n     * @param   [options={}] - Custom notifier options\n     * @returns - Notifier module with custom providers\n     */\n    static withConfig(options = {}) {\n        return {\n            ngModule: NotifierModule,\n            providers: [\n                // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n                {\n                    provide: NotifierOptionsToken,\n                    useValue: options,\n                },\n                // Provide a custom notifier configuration, based on the given notifier options\n                {\n                    deps: [NotifierOptionsToken],\n                    provide: NotifierConfigToken,\n                    useFactory: notifierCustomConfigFactory,\n                },\n            ],\n        };\n    }\n}\nNotifierModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNotifierModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierModule, declarations: [NotifierContainerComponent, NotifierNotificationComponent], imports: [CommonModule], exports: [NotifierContainerComponent] });\nNotifierModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierModule, providers: [\n        NotifierAnimationService,\n        NotifierService,\n        NotifierQueueService,\n        // Provide the default notifier configuration if just the module is imported\n        {\n            provide: NotifierConfigToken,\n            useFactory: notifierDefaultConfigFactory,\n        },\n    ], imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.1\", ngImport: i0, type: NotifierModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NotifierContainerComponent, NotifierNotificationComponent],\n                    exports: [NotifierContainerComponent],\n                    imports: [CommonModule],\n                    providers: [\n                        NotifierAnimationService,\n                        NotifierService,\n                        NotifierQueueService,\n                        // Provide the default notifier configuration if just the module is imported\n                        {\n                            provide: NotifierConfigToken,\n                            useFactory: notifierDefaultConfigFactory,\n                        },\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NotifierConfig, NotifierConfigToken, NotifierContainerComponent, NotifierModule, NotifierNotificationComponent, NotifierOptionsToken, NotifierService, notifierCustomConfigFactory, notifierDefaultConfigFactory };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,cAAc,EAAEC,MAAM,EAAEC,YAAY,EAAEC,SAAS,EAAEC,uBAAuB,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,eAAe;AAC7I,SAASC,OAAO,QAAQ,MAAM;AAC9B,OAAO,KAAKC,EAAE,MAAM,iBAAiB;AACrC,SAASC,YAAY,QAAQ,iBAAiB;;AAE9C;AACA;AACA;AACA;AACA;AAJA;EAAA;IAAA;EAAA;AAAA;AAAA;EAAA;IA0EuGZ,EAAE,yBAqtBwI;EAAA;EAAA;IAAA,eArtB1IA,EAAE;IAAFA,EAAE,6DAqtBoD,4BArtBtDA,EAAE,8CAqtBoD;EAAA;AAAA;AAAA;EAAA;IAAA,YArtBtDA,EAAE;IAAFA,EAAE,+BAqtB4b;IArtB9bA,EAAE;MAAFA,EAAE;MAAA,eAAFA,EAAE;MAAA,OAAFA,EAAE,aAqtBqa,uBAAgB;IAAA,EAAE;IArtBzbA,EAAE,iBAqtBqiB;IArtBviBA,EAAE,4BAqtBqiB;IArtBviBA,EAAE,wBAqtBiqB;IArtBnqBA,EAAE,eAqtB6qB;EAAA;AAAA;AAAA;EAAA;IArtB/qBA,EAAE,0BAqtBiO;IArtBnOA,EAAE,UAqtB2P;IArtB7PA,EAAE,eAqtB+P;IArtBjQA,EAAE,gGAqtB0rB;EAAA;EAAA;IAAA,eArtB5rBA,EAAE;IAAFA,EAAE,aAqtB2P;IArtB7PA,EAAE,+CAqtB2P;IArtB7PA,EAAE,aAqtBmZ;IArtBrZA,EAAE,8DAqtBmZ;EAAA;AAAA;AAAA;EAAA;IAAA,YArtBrZA,EAAE;IAAFA,EAAE,2BAkoC2S;IAloC7SA,EAAE;MAAFA,EAAE;MAAA,eAAFA,EAAE;MAAA,OAAFA,EAAE,aAkoCkX,kCAA2B;IAAA,EAAE;MAloCjZA,EAAE;MAAA,eAAFA,EAAE;MAAA,OAAFA,EAAE,aAkoC4Z,oCAA6B;IAAA,EAA1C;IAloCjZA,EAAE,eAkoC0d;EAAA;EAAA;IAAA;IAloC5dA,EAAE,aAkoCuW;IAloCzWA,EAAE,4CAkoCuW;EAAA;AAAA;AAvsChd,MAAMa,oBAAoB,CAAC;EACvB;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACC,OAAO,EAAE;IACjB;AACR;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpBC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEH,OAAO,CAAC;IAC5B;IACA;IACA;IACA,IAAIA,OAAO,CAACI,EAAE,KAAKC,SAAS,EAAE;MAC1B,IAAI,CAACD,EAAE,GAAI,MAAK,IAAIE,IAAI,EAAE,CAACC,OAAO,EAAG,EAAC;IAC1C;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,CAAC;EACvB;AACJ;AACA;EACIT,WAAW,GAAG;IACV,IAAI,CAACU,YAAY,GAAG,IAAId,OAAO,EAAE;IACjC,IAAI,CAACe,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,kBAAkB,GAAG,KAAK;EACnC;EACA;AACJ;AACA;AACA;AACA;EACIC,IAAI,CAACC,MAAM,EAAE;IACT,IAAI,CAACH,WAAW,CAACE,IAAI,CAACC,MAAM,CAAC;IAC7B,IAAI,CAACC,kBAAkB,EAAE;EAC7B;EACA;AACJ;AACA;EACIC,QAAQ,GAAG;IACP,IAAI,CAACJ,kBAAkB,GAAG,KAAK;IAC/B,IAAI,CAACG,kBAAkB,EAAE;EAC7B;EACA;AACJ;AACA;EACIA,kBAAkB,GAAG;IACjB,IAAI,IAAI,CAACH,kBAAkB,IAAI,IAAI,CAACD,WAAW,CAACM,MAAM,KAAK,CAAC,EAAE;MAC1D,OAAO,CAAC;IACZ;;IACA,IAAI,CAACL,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACF,YAAY,CAACQ,IAAI,CAAC,IAAI,CAACP,WAAW,CAACQ,KAAK,EAAE,CAAC,CAAC,CAAC;EACtD;AACJ;;AACAV,oBAAoB,CAACW,IAAI;EAAA,iBAAwFX,oBAAoB;AAAA,CAAoD;AACzLA,oBAAoB,CAACY,KAAK,kBAD6EnC,EAAE;EAAA,OACYuB,oBAAoB;EAAA,SAApBA,oBAAoB;AAAA,EAAG;AAC5I;EAAA,mDAFuGvB,EAAE,mBAEduB,oBAAoB,EAAc,CAAC;IAClHa,IAAI,EAAEnC;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,EAAE;EAAE,CAAC;AAAA;;AAEtD;AACA;AACA;AACA,MAAMoC,oBAAoB,GAAG,IAAInC,cAAc,CAAC,qCAAqC,CAAC;AACtF;AACA;AACA;AACA,MAAMoC,mBAAmB,GAAG,IAAIpC,cAAc,CAAC,oCAAoC,CAAC;;AAEpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqC,cAAc,CAAC;EACjB;AACJ;AACA;AACA;AACA;EACIzB,WAAW,CAAC0B,aAAa,GAAG,CAAC,CAAC,EAAE;IAC5B;IACA,IAAI,CAACC,UAAU,GAAG;MACdC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;QACFC,MAAM,EAAE,MAAM;QACdC,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE,MAAM;QACdC,KAAK,EAAE;MACX,CAAC;MACDC,OAAO,EAAE,GAAG;MACZf,KAAK,EAAE;QACHW,MAAM,EAAE,MAAM;QACdG,KAAK,EAAE;MACX,CAAC;MACDE,IAAI,EAAE;QACFL,MAAM,EAAE,MAAM;QACdE,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE;MACX;IACJ,CAAC;IACD,IAAI,CAACG,SAAS,GAAG;MACbC,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAE,KAAK;MACdC,WAAW,EAAE,eAAe;MAC5BC,iBAAiB,EAAE,IAAI;MACvBC,QAAQ,EAAE;IACd,CAAC;IACD,IAAI,CAACC,QAAQ,GAAG;MACZC,UAAU,EAAE;QACRC,QAAQ,EAAE,EAAE;QACZF,QAAQ,EAAE;MACd,CAAC;MACDG,QAAQ,EAAE;QACND,QAAQ,EAAE,EAAE;QACZE,GAAG,EAAE,EAAE;QACPJ,QAAQ,EAAE;MACd;IACJ,CAAC;IACD,IAAI,CAACK,KAAK,GAAG,UAAU;IACvB;IACA;IACA;IACA,IAAIrB,aAAa,CAACqB,KAAK,KAAKzC,SAAS,EAAE;MACnC,IAAI,CAACyC,KAAK,GAAGrB,aAAa,CAACqB,KAAK;IACpC;IACA,IAAIrB,aAAa,CAACC,UAAU,KAAKrB,SAAS,EAAE;MACxC,IAAIoB,aAAa,CAACC,UAAU,CAACC,OAAO,KAAKtB,SAAS,EAAE;QAChD,IAAI,CAACqB,UAAU,CAACC,OAAO,GAAGF,aAAa,CAACC,UAAU,CAACC,OAAO;MAC9D;MACA,IAAIF,aAAa,CAACC,UAAU,CAACO,OAAO,KAAK5B,SAAS,EAAE;QAChD,IAAI,CAACqB,UAAU,CAACO,OAAO,GAAGR,aAAa,CAACC,UAAU,CAACO,OAAO;MAC9D;MACA,IAAIR,aAAa,CAACC,UAAU,CAACE,IAAI,KAAKvB,SAAS,EAAE;QAC7CH,MAAM,CAACC,MAAM,CAAC,IAAI,CAACuB,UAAU,CAACE,IAAI,EAAEH,aAAa,CAACC,UAAU,CAACE,IAAI,CAAC;MACtE;MACA,IAAIH,aAAa,CAACC,UAAU,CAACR,KAAK,KAAKb,SAAS,EAAE;QAC9CH,MAAM,CAACC,MAAM,CAAC,IAAI,CAACuB,UAAU,CAACR,KAAK,EAAEO,aAAa,CAACC,UAAU,CAACR,KAAK,CAAC;MACxE;MACA,IAAIO,aAAa,CAACC,UAAU,CAACQ,IAAI,KAAK7B,SAAS,EAAE;QAC7CH,MAAM,CAACC,MAAM,CAAC,IAAI,CAACuB,UAAU,CAACQ,IAAI,EAAET,aAAa,CAACC,UAAU,CAACQ,IAAI,CAAC;MACtE;IACJ;IACA,IAAIT,aAAa,CAACU,SAAS,KAAK9B,SAAS,EAAE;MACvCH,MAAM,CAACC,MAAM,CAAC,IAAI,CAACgC,SAAS,EAAEV,aAAa,CAACU,SAAS,CAAC;IAC1D;IACA,IAAIV,aAAa,CAACgB,QAAQ,KAAKpC,SAAS,EAAE;MACtC,IAAIoB,aAAa,CAACgB,QAAQ,CAACC,UAAU,KAAKrC,SAAS,EAAE;QACjDH,MAAM,CAACC,MAAM,CAAC,IAAI,CAACsC,QAAQ,CAACC,UAAU,EAAEjB,aAAa,CAACgB,QAAQ,CAACC,UAAU,CAAC;MAC9E;MACA,IAAIjB,aAAa,CAACgB,QAAQ,CAACG,QAAQ,KAAKvC,SAAS,EAAE;QAC/CH,MAAM,CAACC,MAAM,CAAC,IAAI,CAACsC,QAAQ,CAACG,QAAQ,EAAEnB,aAAa,CAACgB,QAAQ,CAACG,QAAQ,CAAC;MAC1E;IACJ;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,eAAe,CAAC;EAClB;AACJ;AACA;AACA;AACA;AACA;EACIhD,WAAW,CAACiD,oBAAoB,EAAEC,MAAM,EAAE;IACtC,IAAI,CAACC,YAAY,GAAGF,oBAAoB;IACxC,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EACA;AACJ;AACA;AACA;AACA;EACIE,SAAS,GAAG;IACR,OAAO,IAAI,CAACF,MAAM;EACtB;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIxC,YAAY,GAAG;IACf,OAAO,IAAI,CAACyC,YAAY,CAACzC,YAAY,CAAC2C,YAAY,EAAE;EACxD;EACA;AACJ;AACA;AACA;AACA;EACIlB,IAAI,CAACmB,mBAAmB,EAAE;IACtB,IAAI,CAACH,YAAY,CAACtC,IAAI,CAAC;MACnB0C,OAAO,EAAED,mBAAmB;MAC5BhC,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACIO,IAAI,CAAC2B,cAAc,EAAE;IACjB,IAAI,CAACL,YAAY,CAACtC,IAAI,CAAC;MACnB0C,OAAO,EAAEC,cAAc;MACvBlC,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACImC,UAAU,GAAG;IACT,IAAI,CAACN,YAAY,CAACtC,IAAI,CAAC;MACnBS,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIoC,UAAU,GAAG;IACT,IAAI,CAACP,YAAY,CAACtC,IAAI,CAAC;MACnBS,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIqC,OAAO,GAAG;IACN,IAAI,CAACR,YAAY,CAACtC,IAAI,CAAC;MACnBS,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIsC,MAAM,CAACtC,IAAI,EAAEuC,OAAO,EAAEL,cAAc,EAAE;IAClC,MAAMF,mBAAmB,GAAG;MACxBO,OAAO;MACPvC;IACJ,CAAC;IACD,IAAIkC,cAAc,KAAKlD,SAAS,EAAE;MAC9BgD,mBAAmB,CAACjD,EAAE,GAAGmD,cAAc;IAC3C;IACA,IAAI,CAACrB,IAAI,CAACmB,mBAAmB,CAAC;EAClC;AACJ;AACAN,eAAe,CAAC5B,IAAI;EAAA,iBAAwF4B,eAAe,EA3MpB9D,EAAE,UA2MoCuB,oBAAoB,GA3M1DvB,EAAE,UA2MqEsC,mBAAmB;AAAA,CAA6C;AAC9OwB,eAAe,CAAC3B,KAAK,kBA5MkFnC,EAAE;EAAA,OA4MO8D,eAAe;EAAA,SAAfA,eAAe;AAAA,EAAG;AAClI;EAAA,mDA7MuG9D,EAAE,mBA6Md8D,eAAe,EAAc,CAAC;IAC7G1B,IAAI,EAAEnC;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEmC,IAAI,EAAEb;IAAqB,CAAC,EAAE;MAAEa,IAAI,EAAEG,cAAc;MAAEqC,UAAU,EAAE,CAAC;QACnGxC,IAAI,EAAEjC,MAAM;QACZ0E,IAAI,EAAE,CAACvC,mBAAmB;MAC9B,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC;AAAA;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwC,oBAAoB,CAAC;EACvB;AACJ;AACA;EACIhE,WAAW,GAAG;IACV,IAAI,CAACiE,GAAG,GAAG,CAAC;IACZ,IAAI,CAACC,SAAS,GAAG,CAAC;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,KAAK,CAACC,QAAQ,EAAE;IACZ,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC5B;MACA,IAAI,CAACJ,SAAS,GAAGE,QAAQ;MACzB;MACA,IAAI,CAACG,qBAAqB,GAAGD,OAAO;MACpC,IAAI,CAACtD,QAAQ,EAAE;IACnB,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIwD,KAAK,GAAG;IACJC,YAAY,CAAC,IAAI,CAACC,OAAO,CAAC;IAC1B,IAAI,CAACR,SAAS,IAAI,IAAI3D,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI,CAACyD,GAAG;EACrD;EACA;AACJ;AACA;EACIjD,QAAQ,GAAG;IACP,IAAI,CAACiD,GAAG,GAAG,IAAI1D,IAAI,EAAE,CAACC,OAAO,EAAE;IAC/B,IAAI,CAACkE,OAAO,GAAGC,MAAM,CAACC,UAAU,CAAC,MAAM;MACnC,IAAI,CAACC,MAAM,EAAE;IACjB,CAAC,EAAE,IAAI,CAACX,SAAS,CAAC;EACtB;EACA;AACJ;AACA;EACIY,IAAI,GAAG;IACHL,YAAY,CAAC,IAAI,CAACC,OAAO,CAAC;IAC1B,IAAI,CAACR,SAAS,GAAG,CAAC;EACtB;EACA;AACJ;AACA;EACIW,MAAM,GAAG;IACL,IAAI,CAACN,qBAAqB,EAAE;EAChC;AACJ;AACAP,oBAAoB,CAAC5C,IAAI;EAAA,iBAAwF4C,oBAAoB;AAAA,CAAoD;AACzLA,oBAAoB,CAAC3C,KAAK,kBAhR6EnC,EAAE;EAAA,OAgRY8E,oBAAoB;EAAA,SAApBA,oBAAoB;AAAA,EAAG;AAC5I;EAAA,mDAjRuG9E,EAAE,mBAiRd8E,oBAAoB,EAAc,CAAC;IAClH1C,IAAI,EAAEnC;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,EAAE;EAAE,CAAC;AAAA;;AAEtD;AACA;AACA;AACA,MAAM4F,IAAI,GAAG;EACTlD,IAAI,EAAE,MAAM;IACR,OAAO;MACHmD,IAAI,EAAE;QACFC,OAAO,EAAE;MACb,CAAC;MACDC,EAAE,EAAE;QACAD,OAAO,EAAE;MACb;IACJ,CAAC;EACL,CAAC;EACD9C,IAAI,EAAE,MAAM;IACR,OAAO;MACH6C,IAAI,EAAE;QACFC,OAAO,EAAE;MACb,CAAC;MACDC,EAAE,EAAE;QACAD,OAAO,EAAE;MACb;IACJ,CAAC;EACL;AACJ,CAAC;;AAED;AACA;AACA;AACA,MAAME,KAAK,GAAG;EACVtD,IAAI,EAAGuD,YAAY,IAAK;IACpB;IACA,MAAMlC,MAAM,GAAGkC,YAAY,CAACC,SAAS,CAACjC,SAAS,EAAE;IACjD,MAAMjC,KAAK,GAAGiE,YAAY,CAACC,SAAS,CAACC,QAAQ,EAAE;IAC/C,IAAIN,IAAI;IACR,IAAIE,EAAE;IACN;IACA,IAAIhC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACD,QAAQ,KAAK,MAAM,EAAE;MAChDsC,IAAI,GAAG;QACHO,SAAS,EAAG,mBAAkBpE,KAAM;MACxC,CAAC;MACD+D,EAAE,GAAG;QACDK,SAAS,EAAG,8BAA6BrC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS,gBAAezB,KAAM;MACtG,CAAC;IACL,CAAC,MACI,IAAI+B,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACD,QAAQ,KAAK,OAAO,EAAE;MACtDsC,IAAI,GAAG;QACHO,SAAS,EAAG,mBAAkBpE,KAAM;MACxC,CAAC;MACD+D,EAAE,GAAG;QACDK,SAAS,EAAG,6BAA4BrC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS,gBAAezB,KAAM;MACrG,CAAC;IACL,CAAC,MACI;MACD,IAAIqE,kBAAkB;MACtB,IAAItC,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACH,QAAQ,KAAK,KAAK,EAAE;QAC7C8C,kBAAkB,GAAI,iBAAgBtC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS,aAAY;MAC1F,CAAC,MACI;QACD4C,kBAAkB,GAAI,gBAAetC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS,aAAY;MACzF;MACAoC,IAAI,GAAG;QACHO,SAAS,EAAG,sBAAqBpE,KAAM;MAC3C,CAAC;MACD+D,EAAE,GAAG;QACDK,SAAS,EAAG,sBAAqBC,kBAAmB;MACxD,CAAC;IACL;IACA;IACA,OAAO;MACHR,IAAI;MACJE;IACJ,CAAC;EACL,CAAC;EACD/C,IAAI,EAAGiD,YAAY,IAAK;IACpB;IACA,MAAMlC,MAAM,GAAGkC,YAAY,CAACC,SAAS,CAACjC,SAAS,EAAE;IACjD,IAAI4B,IAAI;IACR,IAAIE,EAAE;IACN;IACA,IAAIhC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACD,QAAQ,KAAK,MAAM,EAAE;MAChDsC,IAAI,GAAG;QACHO,SAAS,EAAG,8BAA6BrC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS;MACjF,CAAC;MACDsC,EAAE,GAAG;QACDK,SAAS,EAAE;MACf,CAAC;IACL,CAAC,MACI,IAAIrC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACD,QAAQ,KAAK,OAAO,EAAE;MACtDsC,IAAI,GAAG;QACHO,SAAS,EAAG,6BAA4BrC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS;MAChF,CAAC;MACDsC,EAAE,GAAG;QACDK,SAAS,EAAE;MACf,CAAC;IACL,CAAC,MACI;MACD,IAAIC,kBAAkB;MACtB,IAAItC,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACH,QAAQ,KAAK,KAAK,EAAE;QAC7C8C,kBAAkB,GAAI,iBAAgBtC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS,aAAY;MAC1F,CAAC,MACI;QACD4C,kBAAkB,GAAI,gBAAetC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS,aAAY;MACzF;MACAoC,IAAI,GAAG;QACHO,SAAS,EAAG,sBAAqBC,kBAAmB;MACxD,CAAC;MACDN,EAAE,GAAG;QACDK,SAAS,EAAE;MACf,CAAC;IACL;IACA;IACA,OAAO;MACHP,IAAI;MACJE;IACJ,CAAC;EACL;AACJ,CAAC;;AAED;AACA;AACA;AACA,MAAMO,wBAAwB,CAAC;EAC3B;AACJ;AACA;EACIzF,WAAW,GAAG;IACV,IAAI,CAAC0F,gBAAgB,GAAG;MACpBX,IAAI;MACJI;IACJ,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIQ,gBAAgB,CAACC,SAAS,EAAER,YAAY,EAAE;IACtC;IACA,IAAIS,SAAS;IACb,IAAIzB,QAAQ;IACZ,IAAItC,MAAM;IACV,IAAI8D,SAAS,KAAK,MAAM,EAAE;MACtBC,SAAS,GAAG,IAAI,CAACH,gBAAgB,CAACN,YAAY,CAACC,SAAS,CAACjC,SAAS,EAAE,CAACzB,UAAU,CAACQ,IAAI,CAACH,MAAM,CAAC,CAACG,IAAI,CAACiD,YAAY,CAAC;MAC/GhB,QAAQ,GAAGgB,YAAY,CAACC,SAAS,CAACjC,SAAS,EAAE,CAACzB,UAAU,CAACQ,IAAI,CAACF,KAAK;MACnEH,MAAM,GAAGsD,YAAY,CAACC,SAAS,CAACjC,SAAS,EAAE,CAACzB,UAAU,CAACQ,IAAI,CAACL,MAAM;IACtE,CAAC,MACI;MACD+D,SAAS,GAAG,IAAI,CAACH,gBAAgB,CAACN,YAAY,CAACC,SAAS,CAACjC,SAAS,EAAE,CAACzB,UAAU,CAACE,IAAI,CAACG,MAAM,CAAC,CAACH,IAAI,CAACuD,YAAY,CAAC;MAC/GhB,QAAQ,GAAGgB,YAAY,CAACC,SAAS,CAACjC,SAAS,EAAE,CAACzB,UAAU,CAACE,IAAI,CAACI,KAAK;MACnEH,MAAM,GAAGsD,YAAY,CAACC,SAAS,CAACjC,SAAS,EAAE,CAACzB,UAAU,CAACE,IAAI,CAACC,MAAM;IACtE;IACA;IACA,OAAO;MACH+D,SAAS,EAAE,CAACA,SAAS,CAACb,IAAI,EAAEa,SAAS,CAACX,EAAE,CAAC;MACzCjF,OAAO,EAAE;QACLmE,QAAQ;QACRtC,MAAM;QACNgE,IAAI,EAAE,UAAU,CAAE;MACtB;IACJ,CAAC;EACL;AACJ;;AACAL,wBAAwB,CAACrE,IAAI;EAAA,iBAAwFqE,wBAAwB;AAAA,CAAoD;AACjMA,wBAAwB,CAACpE,KAAK,kBA9byEnC,EAAE;EAAA,OA8bgBuG,wBAAwB;EAAA,SAAxBA,wBAAwB;AAAA,EAAG;AACpJ;EAAA,mDA/buGvG,EAAE,mBA+bduG,wBAAwB,EAAc,CAAC;IACtHnE,IAAI,EAAEnC;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,EAAE;EAAE,CAAC;AAAA;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4G,6BAA6B,CAAC;EAChC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI/F,WAAW,CAACgG,UAAU,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,wBAAwB,EAAE;IAC/F,IAAI,CAAClD,MAAM,GAAGgD,eAAe,CAAC9C,SAAS,EAAE;IACzC,IAAI,CAACiD,KAAK,GAAG,IAAI/G,YAAY,EAAE;IAC/B,IAAI,CAACgH,OAAO,GAAG,IAAIhH,YAAY,EAAE;IACjC,IAAI,CAACiH,YAAY,GAAGJ,oBAAoB;IACxC,IAAI,CAACK,gBAAgB,GAAGJ,wBAAwB;IAChD,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACQ,OAAO,GAAGT,UAAU,CAACU,aAAa;IACvC,IAAI,CAACC,YAAY,GAAG,CAAC;EACzB;EACA;AACJ;AACA;EACIC,eAAe,GAAG;IACd,IAAI,CAACC,KAAK,EAAE;IACZ,IAAI,CAACC,aAAa,GAAG,IAAI,CAACL,OAAO,CAACM,YAAY;IAC9C,IAAI,CAACC,YAAY,GAAG,IAAI,CAACP,OAAO,CAACQ,WAAW;IAC5C,IAAI,CAACZ,KAAK,CAACa,IAAI,CAAC,IAAI,CAAC;EACzB;EACA;AACJ;AACA;AACA;AACA;EACI9D,SAAS,GAAG;IACR,OAAO,IAAI,CAACF,MAAM;EACtB;EACA;AACJ;AACA;AACA;AACA;EACIiE,SAAS,GAAG;IACR,OAAO,IAAI,CAACL,aAAa;EAC7B;EACA;AACJ;AACA;AACA;AACA;EACIM,QAAQ,GAAG;IACP,OAAO,IAAI,CAACJ,YAAY;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACI1B,QAAQ,GAAG;IACP,OAAO,IAAI,CAACqB,YAAY;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACIxE,IAAI,GAAG;IACH,OAAO,IAAIkC,OAAO,CAAEC,OAAO,IAAK;MAC5B;MACA,IAAI,IAAI,CAACpB,MAAM,CAACvB,UAAU,CAACC,OAAO,IAAI,IAAI,CAACsB,MAAM,CAACvB,UAAU,CAACQ,IAAI,CAACF,KAAK,GAAG,CAAC,EAAE;QACzE;QACA,MAAMoF,aAAa,GAAG,IAAI,CAACb,gBAAgB,CAACb,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACP,YAAY,CAAC;QACvF;QACA,MAAMkC,kBAAkB,GAAGnH,MAAM,CAACoH,IAAI,CAACF,aAAa,CAACxB,SAAS,CAAC,CAAC,CAAC,CAAC;QAClE,KAAK,IAAI2B,CAAC,GAAGF,kBAAkB,CAACrG,MAAM,GAAG,CAAC,EAAEuG,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UACrD,IAAI,CAACvB,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAEa,kBAAkB,CAACE,CAAC,CAAC,EAAEH,aAAa,CAACxB,SAAS,CAAC,CAAC,CAAC,CAACyB,kBAAkB,CAACE,CAAC,CAAC,CAAC,CAAC;QAClH;QACA;QACA,IAAI,CAACvB,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC;QAC7D,MAAMiB,SAAS,GAAG,IAAI,CAACjB,OAAO,CAACkB,OAAO,CAACN,aAAa,CAACxB,SAAS,EAAEwB,aAAa,CAACpH,OAAO,CAAC;QACtFyH,SAAS,CAACE,QAAQ,GAAG,MAAM;UACvB,IAAI,CAACC,kBAAkB,EAAE;UACzBvD,OAAO,EAAE,CAAC,CAAC;QACf,CAAC;MACL,CAAC,MACI;QACD;QACA,IAAI,CAAC2B,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC;QAC7D,IAAI,CAACoB,kBAAkB,EAAE;QACzBvD,OAAO,EAAE,CAAC,CAAC;MACf;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACIzC,IAAI,GAAG;IACH,OAAO,IAAIwC,OAAO,CAAEC,OAAO,IAAK;MAC5B,IAAI,CAACwD,iBAAiB,EAAE;MACxB;MACA,IAAI,IAAI,CAAC5E,MAAM,CAACvB,UAAU,CAACC,OAAO,IAAI,IAAI,CAACsB,MAAM,CAACvB,UAAU,CAACE,IAAI,CAACI,KAAK,GAAG,CAAC,EAAE;QACzE,MAAMoF,aAAa,GAAG,IAAI,CAACb,gBAAgB,CAACb,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACP,YAAY,CAAC;QACvF,MAAMsC,SAAS,GAAG,IAAI,CAACjB,OAAO,CAACkB,OAAO,CAACN,aAAa,CAACxB,SAAS,EAAEwB,aAAa,CAACpH,OAAO,CAAC;QACtFyH,SAAS,CAACE,QAAQ,GAAG,MAAM;UACvBtD,OAAO,EAAE,CAAC,CAAC;QACf,CAAC;MACL,CAAC,MACI;QACDA,OAAO,EAAE,CAAC,CAAC;MACf;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACInD,KAAK,CAACyB,QAAQ,EAAEmF,gBAAgB,EAAE;IAC9B,OAAO,IAAI1D,OAAO,CAAEC,OAAO,IAAK;MAC5B;MACA,IAAI0D,eAAe;MACnB,IAAK,IAAI,CAAC9E,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACH,QAAQ,KAAK,KAAK,IAAIqF,gBAAgB,IACpE,IAAI,CAAC7E,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACH,QAAQ,KAAK,QAAQ,IAAI,CAACqF,gBAAiB,EAAE;QAC5EC,eAAe,GAAG,IAAI,CAACrB,YAAY,GAAG/D,QAAQ,GAAG,IAAI,CAACM,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACC,GAAG;MACtF,CAAC,MACI;QACDkF,eAAe,GAAG,IAAI,CAACrB,YAAY,GAAG/D,QAAQ,GAAG,IAAI,CAACM,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACC,GAAG;MACtF;MACA,MAAM0C,kBAAkB,GAAG,IAAI,CAACtC,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACD,QAAQ,KAAK,QAAQ,GAAG,MAAM,GAAG,GAAG;MAC/F;MACA,IAAI,IAAI,CAACQ,MAAM,CAACvB,UAAU,CAACC,OAAO,IAAI,IAAI,CAACsB,MAAM,CAACvB,UAAU,CAACR,KAAK,CAACc,KAAK,GAAG,CAAC,EAAE;QAC1E,MAAMoF,aAAa,GAAG;UAClB;UACAxB,SAAS,EAAE,CACP;YACIN,SAAS,EAAG,gBAAeC,kBAAmB,KAAI,IAAI,CAACmB,YAAa;UACxE,CAAC,EACD;YACIpB,SAAS,EAAG,gBAAeC,kBAAmB,KAAIwC,eAAgB;UACtE,CAAC,CACJ;UACD/H,OAAO,EAAE;YACLmE,QAAQ,EAAE,IAAI,CAAClB,MAAM,CAACvB,UAAU,CAACR,KAAK,CAACc,KAAK;YAC5CH,MAAM,EAAE,IAAI,CAACoB,MAAM,CAACvB,UAAU,CAACR,KAAK,CAACW,MAAM;YAC3CgE,IAAI,EAAE;UACV;QACJ,CAAC;QACD,IAAI,CAACa,YAAY,GAAGqB,eAAe;QACnC,MAAMN,SAAS,GAAG,IAAI,CAACjB,OAAO,CAACkB,OAAO,CAACN,aAAa,CAACxB,SAAS,EAAEwB,aAAa,CAACpH,OAAO,CAAC;QACtFyH,SAAS,CAACE,QAAQ,GAAG,MAAM;UACvBtD,OAAO,EAAE,CAAC,CAAC;QACf,CAAC;MACL,CAAC,MACI;QACD,IAAI,CAAC2B,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAE,WAAW,EAAG,gBAAejB,kBAAmB,KAAIwC,eAAgB,SAAQ,CAAC;QAClH,IAAI,CAACrB,YAAY,GAAGqB,eAAe;QACnC1D,OAAO,EAAE,CAAC,CAAC;MACf;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACI2D,cAAc,GAAG;IACb,IAAI,CAAC3B,OAAO,CAACY,IAAI,CAAC,IAAI,CAAC9B,YAAY,CAAC/E,EAAE,CAAC;EAC3C;EACA;AACJ;AACA;EACI6H,uBAAuB,GAAG;IACtB,IAAI,IAAI,CAAChF,MAAM,CAACd,SAAS,CAACG,WAAW,KAAK,eAAe,EAAE;MACvD,IAAI,CAAC4F,kBAAkB,EAAE;IAC7B,CAAC,MACI,IAAI,IAAI,CAACjF,MAAM,CAACd,SAAS,CAACG,WAAW,KAAK,eAAe,EAAE;MAC5D,IAAI,CAACuF,iBAAiB,EAAE;IAC5B;EACJ;EACA;AACJ;AACA;EACIM,sBAAsB,GAAG;IACrB,IAAI,IAAI,CAAClF,MAAM,CAACd,SAAS,CAACG,WAAW,KAAK,eAAe,EAAE;MACvD,IAAI,CAAC8F,qBAAqB,EAAE;IAChC,CAAC,MACI,IAAI,IAAI,CAACnF,MAAM,CAACd,SAAS,CAACG,WAAW,KAAK,eAAe,EAAE;MAC5D,IAAI,CAACsF,kBAAkB,EAAE;IAC7B;EACJ;EACA;AACJ;AACA;EACIS,mBAAmB,GAAG;IAClB,IAAI,IAAI,CAACpF,MAAM,CAACd,SAAS,CAACE,OAAO,KAAK,MAAM,EAAE;MAC1C,IAAI,CAAC2F,cAAc,EAAE;IACzB;EACJ;EACA;AACJ;AACA;EACIJ,kBAAkB,GAAG;IACjB,IAAI,IAAI,CAAC3E,MAAM,CAACd,SAAS,CAACC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAACa,MAAM,CAACd,SAAS,CAACC,QAAQ,GAAG,CAAC,EAAE;MAChF,IAAI,CAACkE,YAAY,CAACpC,KAAK,CAAC,IAAI,CAACjB,MAAM,CAACd,SAAS,CAACC,QAAQ,CAAC,CAACkG,IAAI,CAAC,MAAM;QAC/D,IAAI,CAACN,cAAc,EAAE;MACzB,CAAC,CAAC;IACN;EACJ;EACA;AACJ;AACA;EACIE,kBAAkB,GAAG;IACjB,IAAI,IAAI,CAACjF,MAAM,CAACd,SAAS,CAACC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAACa,MAAM,CAACd,SAAS,CAACC,QAAQ,GAAG,CAAC,EAAE;MAChF,IAAI,CAACkE,YAAY,CAAC/B,KAAK,EAAE;IAC7B;EACJ;EACA;AACJ;AACA;EACI6D,qBAAqB,GAAG;IACpB,IAAI,IAAI,CAACnF,MAAM,CAACd,SAAS,CAACC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAACa,MAAM,CAACd,SAAS,CAACC,QAAQ,GAAG,CAAC,EAAE;MAChF,IAAI,CAACkE,YAAY,CAACvF,QAAQ,EAAE;IAChC;EACJ;EACA;AACJ;AACA;EACI8G,iBAAiB,GAAG;IAChB,IAAI,IAAI,CAAC5E,MAAM,CAACd,SAAS,CAACC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAACa,MAAM,CAACd,SAAS,CAACC,QAAQ,GAAG,CAAC,EAAE;MAChF,IAAI,CAACkE,YAAY,CAACzB,IAAI,EAAE;IAC5B;EACJ;EACA;AACJ;AACA;EACI+B,KAAK,GAAG;IACJ;IACA,IAAI,IAAI,CAAC3D,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACD,QAAQ,KAAK,MAAM,EAAE;MACrD,IAAI,CAACuD,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAE,MAAM,EAAG,GAAE,IAAI,CAACvD,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS,IAAG,CAAC;IACjG,CAAC,MACI,IAAI,IAAI,CAACM,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACD,QAAQ,KAAK,OAAO,EAAE;MAC3D,IAAI,CAACuD,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAE,OAAO,EAAG,GAAE,IAAI,CAACvD,MAAM,CAACR,QAAQ,CAACC,UAAU,CAACC,QAAS,IAAG,CAAC;IAClG,CAAC,MACI;MACD,IAAI,CAACqD,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC;MACnD;MACA,IAAI,CAACR,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAE,WAAW,EAAE,2BAA2B,CAAC;IAClF;IACA,IAAI,IAAI,CAACvD,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACH,QAAQ,KAAK,KAAK,EAAE;MAClD,IAAI,CAACuD,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAE,KAAK,EAAG,GAAE,IAAI,CAACvD,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACD,QAAS,IAAG,CAAC;IAC9F,CAAC,MACI;MACD,IAAI,CAACqD,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAChB,OAAO,EAAE,QAAQ,EAAG,GAAE,IAAI,CAACvD,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACD,QAAS,IAAG,CAAC;IACjG;IACA;IACA,IAAI,CAACqD,QAAQ,CAACuC,QAAQ,CAAC,IAAI,CAAC/B,OAAO,EAAG,2BAA0B,IAAI,CAACrB,YAAY,CAAC9D,IAAK,EAAC,CAAC;IACzF,IAAI,CAAC2E,QAAQ,CAACuC,QAAQ,CAAC,IAAI,CAAC/B,OAAO,EAAG,2BAA0B,IAAI,CAACvD,MAAM,CAACH,KAAM,EAAC,CAAC;EACxF;AACJ;AACAgD,6BAA6B,CAAC3E,IAAI;EAAA,iBAAwF2E,6BAA6B,EAhtBhD7G,EAAE,mBAgtBgEA,EAAE,CAACuJ,UAAU,GAhtB/EvJ,EAAE,mBAgtB0FA,EAAE,CAACwJ,SAAS,GAhtBxGxJ,EAAE,mBAgtBmH8D,eAAe,GAhtBpI9D,EAAE,mBAgtB+I8E,oBAAoB,GAhtBrK9E,EAAE,mBAgtBgLuG,wBAAwB;AAAA,CAA4C;AAC7VM,6BAA6B,CAAC4C,IAAI,kBAjtBqEzJ,EAAE;EAAA,MAitBK6G,6BAA6B;EAAA;EAAA;EAAA;IAAA;MAjtBpC7G,EAAE;QAAA,OAitBK,yBAAqB;MAAA;QAAA,OAArB,4BAAwB;MAAA;QAAA,OAAxB,6BAAyB;MAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA,WAjtBhCA,EAAE,oBAitBoW;EACrc;EACA;EACA8E,oBAAoB,CACvB;EAAA;EAAA;EAAA;EAAA;IAAA;MArtBkG9E,EAAE,8FAqtBwI;MArtB1IA,EAAE,mGAAFA,EAAE,wBAqtB0sB;IAAA;IAAA;MAAA,YArtB5sBA,EAAE;MAAFA,EAAE,8CAqtBzB;IAAA;EAAA;EAAA,eAAkxBW,EAAE,CAAC+I,IAAI,EAA6F/I,EAAE,CAACgJ,gBAAgB;EAAA;EAAA;AAAA,EAA+K;AACxoC;EAAA,mDAttBuG3J,EAAE,mBAstBd6G,6BAA6B,EAAc,CAAC;IAC3HzE,IAAI,EAAE/B,SAAS;IACfwE,IAAI,EAAE,CAAC;MAAE+E,eAAe,EAAEtJ,uBAAuB,CAACuJ,MAAM;MAAEC,IAAI,EAAE;QACpD,SAAS,EAAE,uBAAuB;QAClC,YAAY,EAAE,0BAA0B;QACxC,aAAa,EAAE,2BAA2B;QAC1CC,KAAK,EAAE;MACX,CAAC;MAAEC,SAAS,EAAE;MACV;MACA;MACAlF,oBAAoB,CACvB;MAAEmF,QAAQ,EAAE,uBAAuB;MAAEjJ,QAAQ,EAAE;IAAwxB,CAAC;EACr1B,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEoB,IAAI,EAAEpC,EAAE,CAACuJ;IAAW,CAAC,EAAE;MAAEnH,IAAI,EAAEpC,EAAE,CAACwJ;IAAU,CAAC,EAAE;MAAEpH,IAAI,EAAE0B;IAAgB,CAAC,EAAE;MAAE1B,IAAI,EAAE0C;IAAqB,CAAC,EAAE;MAAE1C,IAAI,EAAEmE;IAAyB,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAEL,YAAY,EAAE,CAAC;MACvN9D,IAAI,EAAE7B;IACV,CAAC,CAAC;IAAE4G,KAAK,EAAE,CAAC;MACR/E,IAAI,EAAE5B;IACV,CAAC,CAAC;IAAE4G,OAAO,EAAE,CAAC;MACVhF,IAAI,EAAE5B;IACV,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM0J,0BAA0B,CAAC;EAC7B;AACJ;AACA;AACA;AACA;AACA;AACA;EACIpJ,WAAW,CAACqJ,cAAc,EAAEpG,oBAAoB,EAAEiD,eAAe,EAAE;IAC/D,IAAI,CAACmD,cAAc,GAAGA,cAAc;IACpC,IAAI,CAAClG,YAAY,GAAGF,oBAAoB;IACxC,IAAI,CAACC,MAAM,GAAGgD,eAAe,CAAC9C,SAAS,EAAE;IACzC,IAAI,CAACkG,aAAa,GAAG,EAAE;IACvB;IACA,IAAI,CAACC,wBAAwB,GAAG,IAAI,CAACpG,YAAY,CAACzC,YAAY,CAAC8I,SAAS,CAAE1I,MAAM,IAAK;MACjF,IAAI,CAAC2I,YAAY,CAAC3I,MAAM,CAAC,CAACyH,IAAI,CAAC,MAAM;QACjC,IAAI,CAACpF,YAAY,CAACnC,QAAQ,EAAE;MAChC,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACI0I,WAAW,GAAG;IACV,IAAI,IAAI,CAACH,wBAAwB,EAAE;MAC/B,IAAI,CAACA,wBAAwB,CAACI,WAAW,EAAE;IAC/C;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,oBAAoB,CAACC,KAAK,EAAEzE,YAAY,EAAE;IACtC,OAAOA,YAAY,CAAC/E,EAAE;EAC1B;EACA;AACJ;AACA;AACA;AACA;EACIyJ,qBAAqB,CAACtG,cAAc,EAAE;IAClC,IAAI,CAACL,YAAY,CAACtC,IAAI,CAAC;MACnB0C,OAAO,EAAEC,cAAc;MACvBlC,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACIyI,mBAAmB,CAACC,qBAAqB,EAAE;IACvC,MAAMC,mBAAmB,GAAG,IAAI,CAACX,aAAa,CAAC,IAAI,CAACA,aAAa,CAACrI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/EgJ,mBAAmB,CAAC5E,SAAS,GAAG2E,qBAAqB,CAAC,CAAC;IACvD,IAAI,CAACE,wBAAwB,CAACD,mBAAmB,CAAC,CAAC,CAAC;EACxD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIR,YAAY,CAAC3I,MAAM,EAAE;IACjB,QAAQA,MAAM,CAACQ,IAAI,CAAC;IAAA;MAEhB,KAAK,MAAM;QACP,OAAO,IAAI,CAAC6I,gBAAgB,CAACrJ,MAAM,CAAC;MACxC,KAAK,MAAM;QACP,OAAO,IAAI,CAACsJ,gBAAgB,CAACtJ,MAAM,CAAC;MACxC,KAAK,aAAa;QACd,OAAO,IAAI,CAACuJ,sBAAsB,CAACvJ,MAAM,CAAC;MAC9C,KAAK,aAAa;QACd,OAAO,IAAI,CAACwJ,sBAAsB,CAACxJ,MAAM,CAAC;MAC9C,KAAK,UAAU;QACX,OAAO,IAAI,CAACyJ,mBAAmB,EAAE;MACrC;QACI,OAAO,IAAIlG,OAAO,CAAEC,OAAO,IAAK;UAC5BA,OAAO,EAAE,CAAC,CAAC;QACf,CAAC,CAAC;IAAC;EAEf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI6F,gBAAgB,CAACrJ,MAAM,EAAE;IACrB,OAAO,IAAIuD,OAAO,CAAEC,OAAO,IAAK;MAC5B,IAAI,CAACkG,mBAAmB,GAAGlG,OAAO,CAAC,CAAC;MACpC,IAAI,CAACmG,qBAAqB,CAAC,IAAI1K,oBAAoB,CAACe,MAAM,CAACyC,OAAO,CAAC,CAAC;IACxE,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2G,wBAAwB,CAAC9E,YAAY,EAAE;IACnC;IACA,MAAMsF,qBAAqB,GAAG,IAAI,CAACpB,aAAa,CAACrI,MAAM;IACvD,IAAIyJ,qBAAqB,KAAK,CAAC,EAAE;MAC7BtF,YAAY,CAACC,SAAS,CAAClD,IAAI,EAAE,CAACoG,IAAI,CAAC,IAAI,CAACiC,mBAAmB,CAAC,CAAC,CAAC;IAClE,CAAC,MACI;MACD,MAAMG,qBAAqB,GAAG,CAAC;MAC/B;MACA,IAAI,IAAI,CAACzH,MAAM,CAACd,SAAS,CAACK,QAAQ,KAAK,KAAK,IAAI,IAAI,CAACS,MAAM,CAACd,SAAS,CAACK,QAAQ,GAAGkI,qBAAqB,EAAE;QACpG,IAAI,CAACrB,aAAa,CAAC,CAAC,CAAC,CAACjE,SAAS,CAACxD,IAAI,EAAE,CAAC0G,IAAI,CAAC,MAAM;UAC9C,IAAI,CAACqC,0BAA0B,CAAC,IAAI,CAACtB,aAAa,CAAC,CAAC,CAAC,CAAC;UACtDlE,YAAY,CAACC,SAAS,CAAClD,IAAI,EAAE,CAACoG,IAAI,CAAC,IAAI,CAACiC,mBAAmB,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC;MACN,CAAC,MACI;QACD,MAAMK,YAAY,GAAG,EAAE;QACvB;QACA,IAAIH,qBAAqB,GAAG,IAAI,CAACxH,MAAM,CAACd,SAAS,CAACK,QAAQ,EAAE;UACxD,MAAMqI,gBAAgB,GAAG,IAAI,CAACxB,aAAa,CAACyB,KAAK,CAAC,CAAC,EAAEL,qBAAqB,GAAG,CAAC,CAAC;UAC/E;UACA,IAAI,IAAI,CAACxH,MAAM,CAACvB,UAAU,CAACC,OAAO,EAAE;YAChC;YACA,IAAI,IAAI,CAACsB,MAAM,CAACvB,UAAU,CAACO,OAAO,KAAK,KAAK,IAAI,IAAI,CAACgB,MAAM,CAACvB,UAAU,CAACO,OAAO,GAAG,CAAC,EAAE;cAChF2I,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACyI,aAAa,CAAC,CAAC,CAAC,CAACjE,SAAS,CAACxD,IAAI,EAAE,CAAC;cACzD+C,UAAU,CAAC,MAAM;gBACbiG,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACmK,kBAAkB,CAACF,gBAAgB,EAAE1F,YAAY,CAACC,SAAS,CAAC8B,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;cAC1G,CAAC,EAAE,IAAI,CAACjE,MAAM,CAACvB,UAAU,CAACE,IAAI,CAACI,KAAK,GAAG,IAAI,CAACiB,MAAM,CAACvB,UAAU,CAACO,OAAO,CAAC;cACtE0C,UAAU,CAAC,MAAM;gBACbiG,YAAY,CAAChK,IAAI,CAACuE,YAAY,CAACC,SAAS,CAAClD,IAAI,EAAE,CAAC;cACpD,CAAC,EAAE,IAAI,CAACe,MAAM,CAACvB,UAAU,CAACE,IAAI,CAACI,KAAK,GAAG,IAAI,CAACiB,MAAM,CAACvB,UAAU,CAACR,KAAK,CAACc,KAAK,GAAG,IAAI,CAACiB,MAAM,CAACvB,UAAU,CAACO,OAAO,CAAC;YAC/G,CAAC,MACI;cACD2I,YAAY,CAAChK,IAAI,CAAC,IAAIwD,OAAO,CAAEC,OAAO,IAAK;gBACvC,IAAI,CAACgF,aAAa,CAAC,CAAC,CAAC,CAACjE,SAAS,CAACxD,IAAI,EAAE,CAAC0G,IAAI,CAAC,MAAM;kBAC9C,IAAI,CAACyC,kBAAkB,CAACF,gBAAgB,EAAE1F,YAAY,CAACC,SAAS,CAAC8B,SAAS,EAAE,EAAE,IAAI,CAAC,CAACoB,IAAI,CAAC,MAAM;oBAC3FnD,YAAY,CAACC,SAAS,CAAClD,IAAI,EAAE,CAACoG,IAAI,CAACjE,OAAO,CAAC;kBAC/C,CAAC,CAAC;gBACN,CAAC,CAAC;cACN,CAAC,CAAC,CAAC;YACP;UACJ,CAAC,MACI;YACDuG,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACyI,aAAa,CAAC,CAAC,CAAC,CAACjE,SAAS,CAACxD,IAAI,EAAE,CAAC;YACzDgJ,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACmK,kBAAkB,CAACF,gBAAgB,EAAE1F,YAAY,CAACC,SAAS,CAAC8B,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;YACtG0D,YAAY,CAAChK,IAAI,CAACuE,YAAY,CAACC,SAAS,CAAClD,IAAI,EAAE,CAAC;UACpD;QACJ,CAAC,MACI;UACD,MAAM2I,gBAAgB,GAAG,IAAI,CAACxB,aAAa,CAACyB,KAAK,CAAC,CAAC,EAAEL,qBAAqB,GAAG,CAAC,CAAC;UAC/E;UACA,IAAI,IAAI,CAACxH,MAAM,CAACvB,UAAU,CAACC,OAAO,EAAE;YAChC;YACA,IAAI,IAAI,CAACsB,MAAM,CAACvB,UAAU,CAACO,OAAO,KAAK,KAAK,IAAI,IAAI,CAACgB,MAAM,CAACvB,UAAU,CAACO,OAAO,GAAG,CAAC,EAAE;cAChF2I,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACmK,kBAAkB,CAACF,gBAAgB,EAAE1F,YAAY,CAACC,SAAS,CAAC8B,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;cACtGvC,UAAU,CAAC,MAAM;gBACbiG,YAAY,CAAChK,IAAI,CAACuE,YAAY,CAACC,SAAS,CAAClD,IAAI,EAAE,CAAC;cACpD,CAAC,EAAE,IAAI,CAACe,MAAM,CAACvB,UAAU,CAACR,KAAK,CAACc,KAAK,GAAG,IAAI,CAACiB,MAAM,CAACvB,UAAU,CAACO,OAAO,CAAC;YAC3E,CAAC,MACI;cACD2I,YAAY,CAAChK,IAAI,CAAC,IAAIwD,OAAO,CAAEC,OAAO,IAAK;gBACvC,IAAI,CAAC0G,kBAAkB,CAACF,gBAAgB,EAAE1F,YAAY,CAACC,SAAS,CAAC8B,SAAS,EAAE,EAAE,IAAI,CAAC,CAACoB,IAAI,CAAC,MAAM;kBAC3FnD,YAAY,CAACC,SAAS,CAAClD,IAAI,EAAE,CAACoG,IAAI,CAACjE,OAAO,CAAC;gBAC/C,CAAC,CAAC;cACN,CAAC,CAAC,CAAC;YACP;UACJ,CAAC,MACI;YACDuG,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACmK,kBAAkB,CAACF,gBAAgB,EAAE1F,YAAY,CAACC,SAAS,CAAC8B,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;YACtG0D,YAAY,CAAChK,IAAI,CAACuE,YAAY,CAACC,SAAS,CAAClD,IAAI,EAAE,CAAC;UACpD;QACJ;QACAkC,OAAO,CAAC4G,GAAG,CAACJ,YAAY,CAAC,CAACtC,IAAI,CAAC,MAAM;UACjC,IAAImC,qBAAqB,GAAG,IAAI,CAACxH,MAAM,CAACd,SAAS,CAACK,QAAQ,EAAE;YACxD,IAAI,CAACmI,0BAA0B,CAAC,IAAI,CAACtB,aAAa,CAAC,CAAC,CAAC,CAAC;UAC1D;UACA,IAAI,CAACkB,mBAAmB,EAAE;QAC9B,CAAC,CAAC,CAAC,CAAC;MACR;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,gBAAgB,CAACtJ,MAAM,EAAE;IACrB,OAAO,IAAIuD,OAAO,CAAEC,OAAO,IAAK;MAC5B,MAAMuG,YAAY,GAAG,EAAE;MACvB;MACA,MAAMzF,YAAY,GAAG,IAAI,CAAC8F,oBAAoB,CAACpK,MAAM,CAACyC,OAAO,CAAC;MAC9D,IAAI6B,YAAY,KAAK9E,SAAS,EAAE;QAC5BgE,OAAO,EAAE;QACT;MACJ;MACA;MACA,MAAM6G,iBAAiB,GAAG,IAAI,CAACC,yBAAyB,CAACtK,MAAM,CAACyC,OAAO,CAAC;MACxE,IAAI4H,iBAAiB,KAAK7K,SAAS,EAAE;QACjCgE,OAAO,EAAE;QACT;MACJ;MACA,MAAMwG,gBAAgB,GAAG,IAAI,CAACxB,aAAa,CAACyB,KAAK,CAAC,CAAC,EAAEI,iBAAiB,CAAC;MACvE;MACA,IAAIL,gBAAgB,CAAC7J,MAAM,GAAG,CAAC,EAAE;QAC7B;QACA,IAAI,IAAI,CAACiC,MAAM,CAACvB,UAAU,CAACC,OAAO,IAAI,IAAI,CAACsB,MAAM,CAACvB,UAAU,CAACE,IAAI,CAACI,KAAK,GAAG,CAAC,EAAE;UACzE;UACA,IAAI,IAAI,CAACiB,MAAM,CAACvB,UAAU,CAACO,OAAO,KAAK,KAAK,IAAI,IAAI,CAACgB,MAAM,CAACvB,UAAU,CAACO,OAAO,GAAG,CAAC,EAAE;YAChF2I,YAAY,CAAChK,IAAI,CAACuE,YAAY,CAACC,SAAS,CAACxD,IAAI,EAAE,CAAC;YAChD+C,UAAU,CAAC,MAAM;cACbiG,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACmK,kBAAkB,CAACF,gBAAgB,EAAE1F,YAAY,CAACC,SAAS,CAAC8B,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC;YAC3G,CAAC,EAAE,IAAI,CAACjE,MAAM,CAACvB,UAAU,CAACE,IAAI,CAACI,KAAK,GAAG,IAAI,CAACiB,MAAM,CAACvB,UAAU,CAACO,OAAO,CAAC;UAC1E,CAAC,MACI;YACDkD,YAAY,CAACC,SAAS,CAACxD,IAAI,EAAE,CAAC0G,IAAI,CAAC,MAAM;cACrCsC,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACmK,kBAAkB,CAACF,gBAAgB,EAAE1F,YAAY,CAACC,SAAS,CAAC8B,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC;YAC3G,CAAC,CAAC;UACN;QACJ,CAAC,MACI;UACD0D,YAAY,CAAChK,IAAI,CAACuE,YAAY,CAACC,SAAS,CAACxD,IAAI,EAAE,CAAC;UAChDgJ,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACmK,kBAAkB,CAACF,gBAAgB,EAAE1F,YAAY,CAACC,SAAS,CAAC8B,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC;QAC3G;MACJ,CAAC,MACI;QACD0D,YAAY,CAAChK,IAAI,CAACuE,YAAY,CAACC,SAAS,CAACxD,IAAI,EAAE,CAAC;MACpD;MACA;MACAwC,OAAO,CAAC4G,GAAG,CAACJ,YAAY,CAAC,CAACtC,IAAI,CAAC,MAAM;QACjC,IAAI,CAACqC,0BAA0B,CAACxF,YAAY,CAAC;QAC7Cd,OAAO,EAAE,CAAC,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EACI+F,sBAAsB,CAACvJ,MAAM,EAAE;IAC3B;IACA,IAAI,IAAI,CAACwI,aAAa,CAACrI,MAAM,KAAK,CAAC,EAAE;MACjC,OAAO,IAAIoD,OAAO,CAAEC,OAAO,IAAK;QAC5BA,OAAO,EAAE;MACb,CAAC,CAAC,CAAC,CAAC;IACR,CAAC,MACI;MACDxD,MAAM,CAACyC,OAAO,GAAG,IAAI,CAAC+F,aAAa,CAAC,CAAC,CAAC,CAACjJ,EAAE;MACzC,OAAO,IAAI,CAAC+J,gBAAgB,CAACtJ,MAAM,CAAC;IACxC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIwJ,sBAAsB,CAACxJ,MAAM,EAAE;IAC3B;IACA,IAAI,IAAI,CAACwI,aAAa,CAACrI,MAAM,KAAK,CAAC,EAAE;MACjC,OAAO,IAAIoD,OAAO,CAAEC,OAAO,IAAK;QAC5BA,OAAO,EAAE;MACb,CAAC,CAAC,CAAC,CAAC;IACR,CAAC,MACI;MACDxD,MAAM,CAACyC,OAAO,GAAG,IAAI,CAAC+F,aAAa,CAAC,IAAI,CAACA,aAAa,CAACrI,MAAM,GAAG,CAAC,CAAC,CAACZ,EAAE;MACrE,OAAO,IAAI,CAAC+J,gBAAgB,CAACtJ,MAAM,CAAC;IACxC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIyJ,mBAAmB,GAAG;IAClB,OAAO,IAAIlG,OAAO,CAAEC,OAAO,IAAK;MAC5B;MACA,MAAMoG,qBAAqB,GAAG,IAAI,CAACpB,aAAa,CAACrI,MAAM;MACvD,IAAIyJ,qBAAqB,KAAK,CAAC,EAAE;QAC7BpG,OAAO,EAAE,CAAC,CAAC;QACX;MACJ;MACA;MACA,IAAI,IAAI,CAACpB,MAAM,CAACvB,UAAU,CAACC,OAAO,IAC9B,IAAI,CAACsB,MAAM,CAACvB,UAAU,CAACE,IAAI,CAACI,KAAK,GAAG,CAAC,IACrC,IAAI,CAACiB,MAAM,CAACvB,UAAU,CAACE,IAAI,CAACE,MAAM,KAAK,KAAK,IAC5C,IAAI,CAACmB,MAAM,CAACvB,UAAU,CAACE,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;QACxC,KAAK,IAAIyF,CAAC,GAAGkD,qBAAqB,GAAG,CAAC,EAAElD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UACjD,MAAM6D,eAAe,GAAG,IAAI,CAACnI,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACH,QAAQ,KAAK,KAAK,GAAGgI,qBAAqB,GAAG,CAAC,GAAGlD,CAAC;UACxG5C,UAAU,CAAC,MAAM;YACb,IAAI,CAAC0E,aAAa,CAAC9B,CAAC,CAAC,CAACnC,SAAS,CAACxD,IAAI,EAAE,CAAC0G,IAAI,CAAC,MAAM;cAC9C;cACA,IAAK,IAAI,CAACrF,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACH,QAAQ,KAAK,KAAK,IAAI8E,CAAC,KAAK,CAAC,IAC3D,IAAI,CAACtE,MAAM,CAACR,QAAQ,CAACG,QAAQ,CAACH,QAAQ,KAAK,QAAQ,IAAI8E,CAAC,KAAKkD,qBAAqB,GAAG,CAAE,EAAE;gBAC1F,IAAI,CAACY,8BAA8B,EAAE;gBACrChH,OAAO,EAAE,CAAC,CAAC;cACf;YACJ,CAAC,CAAC;UACN,CAAC,EAAE,IAAI,CAACpB,MAAM,CAACvB,UAAU,CAACE,IAAI,CAACE,MAAM,GAAGsJ,eAAe,CAAC;QAC5D;MACJ,CAAC,MACI;QACD,MAAMR,YAAY,GAAG,EAAE;QACvB,KAAK,IAAIrD,CAAC,GAAGkD,qBAAqB,GAAG,CAAC,EAAElD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UACjDqD,YAAY,CAAChK,IAAI,CAAC,IAAI,CAACyI,aAAa,CAAC9B,CAAC,CAAC,CAACnC,SAAS,CAACxD,IAAI,EAAE,CAAC;QAC7D;QACAwC,OAAO,CAAC4G,GAAG,CAACJ,YAAY,CAAC,CAACtC,IAAI,CAAC,MAAM;UACjC,IAAI,CAAC+C,8BAA8B,EAAE;UACrChH,OAAO,EAAE,CAAC,CAAC;QACf,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI0G,kBAAkB,CAAC1B,aAAa,EAAE1G,QAAQ,EAAE2I,WAAW,EAAE;IACrD,OAAO,IAAIlH,OAAO,CAAEC,OAAO,IAAK;MAC5B;MACA,IAAIgF,aAAa,CAACrI,MAAM,KAAK,CAAC,EAAE;QAC5BqD,OAAO,EAAE;QACT;MACJ;MACA,MAAMkH,oBAAoB,GAAG,EAAE;MAC/B,KAAK,IAAIhE,CAAC,GAAG8B,aAAa,CAACrI,MAAM,GAAG,CAAC,EAAEuG,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAChDgE,oBAAoB,CAAC3K,IAAI,CAACyI,aAAa,CAAC9B,CAAC,CAAC,CAACnC,SAAS,CAAClE,KAAK,CAACyB,QAAQ,EAAE2I,WAAW,CAAC,CAAC;MACtF;MACAlH,OAAO,CAAC4G,GAAG,CAACO,oBAAoB,CAAC,CAACjD,IAAI,CAACjE,OAAO,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACImG,qBAAqB,CAACrF,YAAY,EAAE;IAChC,IAAI,CAACkE,aAAa,CAACzI,IAAI,CAACuE,YAAY,CAAC;IACrC,IAAI,CAACiE,cAAc,CAACoC,YAAY,EAAE,CAAC,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIb,0BAA0B,CAACxF,YAAY,EAAE;IACrC,IAAI,CAACkE,aAAa,GAAG,IAAI,CAACA,aAAa,CAACoC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACtG,SAAS,KAAKD,YAAY,CAACC,SAAS,CAAC;IACnG,IAAI,CAACgE,cAAc,CAACoC,YAAY,EAAE,CAAC,CAAC;EACxC;EACA;AACJ;AACA;EACIH,8BAA8B,GAAG;IAC7B,IAAI,CAAChC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACD,cAAc,CAACoC,YAAY,EAAE,CAAC,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIP,oBAAoB,CAAC1H,cAAc,EAAE;IACjC,OAAO,IAAI,CAAC8F,aAAa,CAACsC,IAAI,CAAE3B,mBAAmB,IAAKA,mBAAmB,CAAC5J,EAAE,KAAKmD,cAAc,CAAC;EACtG;EACA;AACJ;AACA;AACA;AACA;AACA;EACI4H,yBAAyB,CAAC5H,cAAc,EAAE;IACtC,MAAM2H,iBAAiB,GAAG,IAAI,CAAC7B,aAAa,CAACuC,SAAS,CAAE5B,mBAAmB,IAAKA,mBAAmB,CAAC5J,EAAE,KAAKmD,cAAc,CAAC;IAC1H,OAAO2H,iBAAiB,KAAK,CAAC,CAAC,GAAGA,iBAAiB,GAAG7K,SAAS;EACnE;AACJ;AACA8I,0BAA0B,CAAChI,IAAI;EAAA,iBAAwFgI,0BAA0B,EAjoC1ClK,EAAE,mBAioC0DA,EAAE,CAAC4M,iBAAiB,GAjoChF5M,EAAE,mBAioC2FuB,oBAAoB,GAjoCjHvB,EAAE,mBAioC4H8D,eAAe;AAAA,CAA4C;AAChSoG,0BAA0B,CAACT,IAAI,kBAloCwEzJ,EAAE;EAAA,MAkoCEkK,0BAA0B;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;IAAA;MAloC9BlK,EAAE,2BAkoC+K;MAloCjLA,EAAE,uEAkoCme;MAloCreA,EAAE,eAkoC0e;IAAA;IAAA;MAloC5eA,EAAE,aAkoC2Q;MAloC7QA,EAAE,yCAkoC2Q;IAAA;EAAA;EAAA,eAA8QW,EAAE,CAACkM,OAAO,EAAmHhG,6BAA6B;EAAA;EAAA;AAAA,EAAsJ;AACl7B;EAAA,mDAnoCuG7G,EAAE,mBAmoCdkK,0BAA0B,EAAc,CAAC;IACxH9H,IAAI,EAAE/B,SAAS;IACfwE,IAAI,EAAE,CAAC;MAAE+E,eAAe,EAAEtJ,uBAAuB,CAACuJ,MAAM;MAAEC,IAAI,EAAE;QACpDC,KAAK,EAAE;MACX,CAAC;MAAEE,QAAQ,EAAE,oBAAoB;MAAEjJ,QAAQ,EAAE;IAAuW,CAAC;EACja,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEoB,IAAI,EAAEpC,EAAE,CAAC4M;IAAkB,CAAC,EAAE;MAAExK,IAAI,EAAEb;IAAqB,CAAC,EAAE;MAAEa,IAAI,EAAE0B;IAAgB,CAAC,CAAC;EAAE,CAAC;AAAA;;AAE/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgJ,2BAA2B,CAAC/L,OAAO,EAAE;EAC1C,OAAO,IAAIwB,cAAc,CAACxB,OAAO,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgM,4BAA4B,GAAG;EACpC,OAAO,IAAIxK,cAAc,CAAC,CAAC,CAAC,CAAC;AACjC;AACA;AACA;AACA;AACA,MAAMyK,cAAc,CAAC;EACjB;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOC,UAAU,CAAClM,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5B,OAAO;MACHmM,QAAQ,EAAEF,cAAc;MACxBhD,SAAS,EAAE;MACP;MACA;QACImD,OAAO,EAAE9K,oBAAoB;QAC7B+K,QAAQ,EAAErM;MACd,CAAC;MACD;MACA;QACIsM,IAAI,EAAE,CAAChL,oBAAoB,CAAC;QAC5B8K,OAAO,EAAE7K,mBAAmB;QAC5BgL,UAAU,EAAER;MAChB,CAAC;IAET,CAAC;EACL;AACJ;AACAE,cAAc,CAAC9K,IAAI;EAAA,iBAAwF8K,cAAc;AAAA,CAAkD;AAC3KA,cAAc,CAACO,IAAI,kBA/rCoFvN,EAAE;EAAA,MA+rCGgN;AAAc,EAA8I;AACxQA,cAAc,CAACQ,IAAI,kBAhsCoFxN,EAAE;EAAA,WAgsC8B,CAC/HuG,wBAAwB,EACxBzC,eAAe,EACfvC,oBAAoB;EACpB;EACA;IACI4L,OAAO,EAAE7K,mBAAmB;IAC5BgL,UAAU,EAAEP;EAChB,CAAC,CACJ;EAAA,UAAYnM,YAAY;AAAA,EAAI;AACjC;EAAA,mDA1sCuGZ,EAAE,mBA0sCdgN,cAAc,EAAc,CAAC;IAC5G5K,IAAI,EAAE3B,QAAQ;IACdoE,IAAI,EAAE,CAAC;MACC4I,YAAY,EAAE,CAACvD,0BAA0B,EAAErD,6BAA6B,CAAC;MACzE6G,OAAO,EAAE,CAACxD,0BAA0B,CAAC;MACrCyD,OAAO,EAAE,CAAC/M,YAAY,CAAC;MACvBoJ,SAAS,EAAE,CACPzD,wBAAwB,EACxBzC,eAAe,EACfvC,oBAAoB;MACpB;MACA;QACI4L,OAAO,EAAE7K,mBAAmB;QAC5BgL,UAAU,EAAEP;MAChB,CAAC;IAET,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAASxK,cAAc,EAAED,mBAAmB,EAAE4H,0BAA0B,EAAE8C,cAAc,EAAEnG,6BAA6B,EAAExE,oBAAoB,EAAEyB,eAAe,EAAEgJ,2BAA2B,EAAEC,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}